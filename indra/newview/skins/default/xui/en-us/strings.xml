<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<!-- This file contains strings that used to be hardcoded in the source.
     It is only for those strings which don't belong in a floater.
     For example, the strings used in avatar chat bubbles, and strings 
     that are returned from one component and may appear in many places-->
<strings>
	
	<!-- Login -->
	<string name="LoginInProgress">Logging in. [APP_NAME] may appear frozen.  Please wait.</string>
	<string name="LoginAuthenticating">Authenticating</string>
	<string name="LoginMaintenance">Performing account maintenance...</string>
	<string name="LoginAttempt">Previous login attempt failed. Logging in, attempt [NUMBER]</string>
	<string name="LoginPrecaching">Loading world...</string>
	<string name="LoginInitializingBrowser">Initializing embedded web browser...</string>
	<string name="LoginInitializingMultimedia">Initializing multimedia...</string>
	<string name="LoginVerifyingCache">Verifying cache files (can take 60-90 seconds)...</string>
	<string name="LoginProcessingResponse">Processing Response...</string>
	<string name="LoginInitializingWorld">Initializing World...</string>
	<string name="LoginDecodingImages">Decoding images...</string>
	<string name="LoginInitializingQuicktime">Initializing QuickTime...</string>
	<string name="LoginQuicktimeNotFound">QuickTime not found - unable to initialize.</string>
	<string name="LoginQuicktimeOK">QuickTime initialized successfully.</string>
	<string name="LoginWaitingForRegionHandshake">Waiting for region handshake...</string>
	<string name="LoginConnectingToRegion">Connecting to region...</string>
	<string name="LoginDownloadingClothing">Downloading clothing...</string>


	<!-- Disconnection -->
	<string name="AgentLostConnection">This region may be experiencing trouble.  Please check your connection to the Internet.</string>
	
	
	<!-- Tooltip, llhoverview.cpp -->
	<string name="TooltipPerson">Person</string><!-- Object under mouse pointer is an avatar -->
	<string name="TooltipNoName">(no name)</string> <!-- No name on an object -->
	<string name="TooltipOwner">Owner:</string> <!-- Owner name follows -->
	<string name="TooltipPublic">Public</string> <!-- Public permissions on an object -->
	<string name="TooltipIsGroup">(Group)</string> <!-- The name before this text is that of a group -->
	<string name="TooltipFlagScript">Script</string>
	<string name="TooltipFlagPhysics">Physics</string>
	<string name="TooltipFlagTouch">Touch</string>
	<string name="TooltipFlagL$">L$</string>
	<string name="TooltipFlagDropInventory">Drop Inventory</string>
	<string name="TooltipFlagPhantom">Phantom</string>
	<string name="TooltipFlagTemporary">Temporary</string>
	<string name="TooltipFlagRightClickMenu">(Right-click for pie menu)</string>
	<string name="TooltipFreeToCopy">Free to copy</string>
	<string name="TooltipForSaleL$">For Sale: L$[AMOUNT]</string> <!-- L$ version -->
	<string name="TooltipForSaleMsg">For Sale: [MESSAGE]</string> <!-- Message (RetrievingData) -->
	<string name="TooltipFlagGroupBuild">Group Build</string>
	<string name="TooltipFlagNoBuild">No Build</string>
	<string name="TooltipFlagNoEdit">Group Build</string>
	<string name="TooltipFlagNotSafe">Not Safe</string><!-- damage area -->
	<string name="TooltipFlagNoFly">No Fly</string>
	<string name="TooltipFlagGroupScripts">Group Scripts</string>
	<string name="TooltipFlagNoScripts">No Scripts</string>
	<string name="TooltipLand">Land:</string>
	<string name="TooltipMustSingleDrop">Only a single item can be dragged here</string>	

	<!-- Toolpie, lltoolpie.cpp -->
	<string name="mute">Mute</string>
	<string name="unmute">Unmute</string>
	<string name="mute_all">Full mute</string>
	<string name="unmute_all">Unmute</string>
	<string name="mute_chat">Mute chat</string>
	<string name="unmute_chat">Unmute chat</string>
	<string name="mute_voice">Mute voice</string>
	<string name="unmute_voice">Unmute vce</string>
	<string name="mute_sounds">Mute sounds</string>
	<string name="unmute_sounds">Unmute snds</string>
	<string name="mute_particles">Mute part.</string>
	<string name="unmute_particles">Unmute part.</string>

	<!-- Indicates that an avatar's name or other similar datum is being retrieved. General usage. -->
	<string name="RetrievingData">Retrieving...</string>

	<string name="ReleaseNotes">Release Notes</string>

	<!-- Indicates something is being loaded. Maybe should be merged with RetrievingData -->
	<string name="LoadingData">Loading...</string>
	
	
	<!-- namecache -->
	<!-- Avatar name: text shown for LLUUID::null -->
	<string name="AvatarNameNobody">(nobody)</string>
	
	<!-- Avatar name: text shown while fetching name -->
	<string name="AvatarNameWaiting">(waiting)</string>

	<!-- Avatar name: text shown as an alternative to AvatarNameFetching, easter egg. -->
	<string name="AvatarNameHippos">(hippos)</string>
	
	<!-- Group name: text shown for LLUUID::null -->
	<string name="GroupNameNone">(none)</string>
	
	<!-- Asset errors. Used in llassetstorage.cpp, translation from error code to error message. -->
	<string name="AssetErrorNone">No error</string>
	<string name="AssetErrorRequestFailed">Asset request: failed</string>
	<string name="AssetErrorNonexistentFile">Asset request: non-existent file</string>
	<string name="AssetErrorNotInDatabase">Asset request: asset not found in database</string>
	<string name="AssetErrorEOF">End of file</string>
	<string name="AssetErrorCannotOpenFile">Cannot open file</string>
	<string name="AssetErrorFileNotFound">File not found</string>
	<string name="AssetErrorTCPTimeout">File transfer timeout</string>
	<string name="AssetErrorCircuitGone">Circuit gone</string>
	<string name="AssetErrorPriceMismatch">Viewer and server do not agree on price</string>
	<string name="AssetErrorUnknownStatus">Unknown status</string>
	
	<!-- llvoavatar. Displayed in the avatar's chat bubble -->
	<string name="AvatarEditingApparance">(Editing Appearance)</string>
	<string name="AvatarAway">Away</string>
	<string name="AvatarBusy">Busy</string>
	<string name="AvatarMuted">Muted</string>

	<!-- animations -->
	<string name="anim_express_afraid">Afraid</string>
	<string name="anim_express_anger">Angry</string>
	<string name="anim_away">Away</string>
	<string name="anim_backflip">Backflip</string>
	<string name="anim_express_laugh">Belly Laugh</string>
	<string name="anim_express_toothsmile">BigSmile</string>
	<string name="anim_blowkiss">Blow Kiss</string>
	<string name="anim_express_bored">Bored</string>
	<string name="anim_bow">Bow</string>
	<string name="anim_clap">Clap</string>
	<string name="anim_courtbow">Court Bow</string>
	<string name="anim_express_cry">Cry</string>
	<string name="anim_dance1">Dance 1</string>
	<string name="anim_dance2">Dance 2</string>
	<string name="anim_dance3">Dance 3</string>
	<string name="anim_dance4">Dance 4</string>
	<string name="anim_dance5">Dance 5</string>
	<string name="anim_dance6">Dance 6</string>
	<string name="anim_dance7">Dance 7</string>
	<string name="anim_dance8">Dance 8</string>
	<string name="anim_express_disdain">Disdain</string>
	<string name="anim_drink">Drink</string>
	<string name="anim_express_embarrased">Embarrassed</string>
	<string name="anim_angry_fingerwag">Finger Wag</string>
	<string name="anim_fist_pump">Fist Pump</string>
	<string name="anim_yoga_float">Floating Yoga</string>
	<string name="anim_express_frown">Frown</string>
	<string name="anim_impatient">Impatient</string>
	<string name="anim_jumpforjoy">Jump For Joy</string>
	<string name="anim_kissmybutt">Kiss My Butt</string>
	<string name="anim_express_kiss">Kiss</string>
	<string name="anim_laugh_short">Laugh</string>
	<string name="anim_musclebeach">Muscle Beach</string>
	<string name="anim_no_unhappy">No (Unhappy)</string>
	<string name="anim_no_head">No</string>
	<string name="anim_nyanya">Nya-nya-nya</string>
	<string name="anim_punch_onetwo">One-Two Punch</string>
	<string name="anim_express_open_mouth">Open Mouth</string>
	<string name="anim_peace">Peace</string>
	<string name="anim_point_you">Point at Other</string>
	<string name="anim_point_me">Point at Self</string>
	<string name="anim_punch_l">Punch Left</string>
	<string name="anim_punch_r">Punch Right</string>
	<string name="anim_rps_countdown">RPS count</string>
	<string name="anim_rps_paper">RPS paper</string>
	<string name="anim_rps_rock">RPS rock</string>
	<string name="anim_rps_scissors">RPS scissors</string>
	<string name="anim_express_repulsed">Repulsed</string>
	<string name="anim_kick_roundhouse_r">Roundhouse Kick</string>
	<string name="anim_express_sad">Sad</string>
	<string name="anim_salute">Salute</string>
	<string name="anim_shout">Shout</string>
	<string name="anim_express_shrug">Shrug</string>
	<string name="anim_express_smile">Smile</string>
	<string name="anim_smoke_idle">Smoke Idle</string>
	<string name="anim_smoke_inhale">Smoke Inhale</string>
	<string name="anim_smoke_throw_down">Smoke Throw Down</string>
	<string name="anim_express_surprise">Surprise</string>
	<string name="anim_sword_strike_r">Sword Strike</string>
	<string name="anim_angry_tantrum">Tantrum</string>
	<string name="anim_express_tongue_out">TongueOut</string>
	<string name="anim_hello">Wave</string>
	<string name="anim_whisper">Whisper</string>
	<string name="anim_whistle">Whistle</string>
	<string name="anim_express_wink">Wink</string>
	<string name="anim_wink_hollywood">Wink (Hollywood)</string>
	<string name="anim_express_worry">Worry</string>
	<string name="anim_yes_happy">Yes (Happy)</string>
	<string name="anim_yes_head">Yes</string>
	
	<string name="texture_loading">Loading...</string>
	<string name="worldmap_offline">Offline</string>
	
	<!-- Chat -->
	<string name="whisper">whispers:</string>
	<string name="shout">shouts:</string>
	<string name="ScriptQuestionCautionChatGranted">'[OBJECTNAME]', an object owned by '[OWNERNAME]', located in [REGIONNAME] at [REGIONPOS], has been granted permission to: [PERMISSIONS].</string>
	<string name="ScriptQuestionCautionChatDenied">'[OBJECTNAME]', an object owned by '[OWNERNAME]', located in [REGIONNAME] at [REGIONPOS], has been denied permission to: [PERMISSIONS].</string>
	<string name="ScriptTakeMoney">Take Linden dollars (L$) from you</string>
	<string name="ActOnControlInputs">Act on your control inputs</string>
	<string name="RemapControlInputs">Remap your control inputs</string>
	<string name="AnimateYourAvatar">Animate your avatar</string>
	<string name="AttachToYourAvatar">Attach to your avatar</string>
	<string name="ReleaseOwnership">Release ownership and become public</string>
	<string name="LinkAndDelink">Link and delink from other objects</string>
	<string name="AddAndRemoveJoints">Add and remove joints with other objects</string>
	<string name="ChangePermissions">Change its permissions</string>
	<string name="TrackYourCamera">Track your camera</string>
	<string name="ControlYourCamera">Control your camera</string>
	<string name="TeleportYourAgent">Teleport you</string>

	<!-- Sim Access labels -->
	<string name="SIM_ACCESS_PG">PG</string>
	<string name="SIM_ACCESS_MATURE">Mature</string>
	<string name="SIM_ACCESS_ADULT">Adult</string>
	<string name="SIM_ACCESS_DOWN">Offline</string>
	<string name="SIM_ACCESS_MIN">Unknown</string>
	
	<!-- For use when we do not have land type back from the server -->
	<string name="land_type_unknown">(unknown)</string>
	
	<!-- Covenant info -->
	<string name="covenant_never_modified">Last Modified: (never)</string>
	<string name="covenant_modified">Last Modified: </string>

	<!-- File load/save dialogs -->
	<string name="all_files">All Files</string>
	<string name="sound_files">Sounds</string>
	<string name="animation_files">Animations</string>
	<string name="scene_files">Models</string>
	<string name="image_files">Images</string>
	<string name="save_file_verb">Save</string>
	<string name="load_file_verb">Load</string>
	<string name="targa_image_files">Targa Images</string>
	<string name="bitmap_image_files">Bitmap Images</string>
	<string name="avi_movie_file">AVI Movie File</string>
	<string name="xaf_animation_file">XAF Anim File</string>
	<string name="xml_file">XML File</string>
	<string name="raw_file">RAW File</string>
	<string name="lsl_file">LSL Script File</string>
	<string name="txt_file">Text File</string>
	<string name="compressed_image_files">Compressed Images</string>
	<string name="load_files">Load Files</string>
	<string name="choose_the_directory">Choose Directory</string>

	<!-- Materials -->
	<string name="Stone">Stone</string>
	<string name="Metal">Metal</string>
	<string name="Glass">Glass</string>
	<string name="Wood">Wood</string>
	<string name="Flesh">Flesh</string>
	<string name="Plastic">Plastic</string>
	<string name="Rubber">Rubber</string>
	<string name="Light">Light</string>

	<!-- Legacy strings, almost never used -->
	<string name="Fullbright">Fullbright (Legacy)</string>	<!-- used in the Build > materials dropdown-->

	<!-- Asset Type human readable names -->
	<string name="texture">texture</string>
	<string name="sound">sound</string>
	<string name="calling card">calling card</string>
	<string name="landmark">landmark</string>
	<string name="legacy script">legacy script</string>
	<string name="clothing">clothing</string>
	<string name="object">object</string>
	<string name="note card">notecard</string>
	<string name="folder">folder</string>
	<string name="root">root</string>
	<string name="lsl2 script">LSL2 script</string>
	<string name="lsl bytecode">LSL bytecode</string>
	<string name="tga texture">tga texture</string>
	<string name="body part">body part</string>
	<string name="targa image">targa image</string>
	<string name="jpeg image">jpeg image</string>
	<string name="animation">animation</string>
	<string name="gesture">gesture</string>
	<string name="simstate">simstate</string>
	<string name="symbolic link">link</string>
	<string name="symbolic folder link">folder link</string>
	<string name="mesh">mesh</string>

	<!-- Wearable Types -->
	<string name="shape">Shape</string>
	<string name="skin">Skin</string>
	<string name="hair">Hair</string>
	<string name="eyes">Eyes</string>
	<string name="shirt">Shirt</string>
	<string name="pants">Pants</string>
	<string name="shoes">Shoes</string>
	<string name="socks">Socks</string>
	<string name="jacket">Jacket</string>
	<string name="gloves">Gloves</string>
	<string name="undershirt">Undershirt</string>
	<string name="underpants">Underpants</string>
	<string name="skirt">Skirt</string>
	<string name="alpha">Alpha</string>
	<string name="tattoo">Tattoo</string>
	<string name="physics">Physics</string>
	<string name="invalid">invalid</string>
	<string name="none">none</string>

	<!-- Financial operations strings -->
	<string name="paid_you_ldollars">[NAME] paid you L$[AMOUNT] [REASON].</string>
	<string name="paid_you_ldollars_no_reason">[NAME] paid you L$[AMOUNT].</string>
	<string name="you_paid_ldollars">You paid [NAME] L$[AMOUNT] [REASON].</string>
	<string name="you_paid_ldollars_no_info">You paid L$[AMOUNT].</string>
	<string name="you_paid_ldollars_no_reason">You paid [NAME] L$[AMOUNT].</string>
	<string name="you_paid_ldollars_no_name">You paid L$[AMOUNT] [REASON].</string>
	<string name="you_paid_failure_ldollars">You failed to pay [NAME] L$[AMOUNT] [REASON].</string>
	<string name="you_paid_failure_ldollars_no_info">You failed to pay L$[AMOUNT].</string>
	<string name="you_paid_failure_ldollars_no_reason">You failed to pay [NAME] L$[AMOUNT].</string>
	<string name="you_paid_failure_ldollars_no_name">You failed to pay L$[AMOUNT] [REASON].</string>
	<string name="for item">for [ITEM]</string>
	<string name="for a parcel of land">for a parcel of land</string>
	<string name="for a land access pass">for a land access pass</string>
	<string name="for deeding land">for deeding land</string>
	<string name="to create a group">to create a group</string>
	<string name="to join a group">to join a group</string>
	<string name="to upload">to upload</string>
	<string name="to publish a classified ad">to publish a classified ad</string>

	<string name="money_balance_increased">Your money balance has increased by L$[AMOUNT]</string>
	<string name="money_balance_decreased">Your money balance has decreased by L$[AMOUNT]</string>

	<!-- names for new inventory items-->
	<string name="New Shape">New Shape</string>
	<string name="New Skin">New Skin</string>
	<string name="New Hair">New Hair</string>
	<string name="New Eyes">New Eyes</string>
	<string name="New Shirt">New Shirt</string>
	<string name="New Pants">New Pants</string>
	<string name="New Shoes">New Shoes</string>
	<string name="New Socks">New Socks</string>
	<string name="New Jacket">New Jacket</string>
	<string name="New Gloves">New Gloves</string>
	<string name="New Undershirt">New Undershirt</string>
	<string name="New Underpants">New Underpants</string>
	<string name="New Skirt">New Skirt</string>
	<string name="New Alpha">New Alpha</string>
	<string name="New Tattoo">New Tattoo</string>
	<string name="New Physics">New Physics</string>
	<string name="Invalid Wearable">Invalid Wearable</string>

	<!-- LSL Usage Hover Tips -->
  <string name="LSLTipSleepTime">
Sleeps script for [SLEEP_TIME] seconds.
  </string>

  <string name="LSLTipText_llSin">
float llSin(float theta)
Returns the sine of theta (theta in radians)
  </string>
  <string name="LSLTipText_llCos">
float llCos(float theta)
Returns the cosine of theta (theta in radians)
  </string>
  <string name="LSLTipText_llTan">
float llTan(float theta)
Returns the tangent of theta (theta in radians)
  </string>
  <string name="LSLTipText_llAtan2">
float llAtan2(float y, float x)
Returns the arctangent2 of y, x
  </string>
  <string name="LSLTipText_llSqrt">
float llSqrt(float val)
Returns the square root of val, or returns 0 and triggers a Math Error for imaginary results
  </string>
  <string name="LSLTipText_llPow">
float llPow(float base, float exponent)
Returns the base raised to the power exponent, or returns 0 and triggers Math Error for imaginary results
  </string>
  <string name="LSLTipText_llAbs">
integer llAbs(integer val)
Returns the positive version of val
  </string>
  <string name="LSLTipText_llFabs">
float llFabs(float val)
Returns the positive version of val
  </string>
  <string name="LSLTipText_llFrand">
float llFrand(float mag)
Returns a pseudo random number in the range [0,mag) or (mag,0]
  </string>
  <string name="LSLTipText_llFloor">
integer llFloor(float val)
Returns largest integer value &lt;= val
  </string>
  <string name="LSLTipText_llCeil">
integer llCeil(float val)
Returns smallest integer value &gt;= val
  </string>
  <string name="LSLTipText_llRound">
integer llRound(float val)
Returns val rounded to the nearest integer
  </string>
  <string name="LSLTipText_llVecMag">
float llVecMag(vector v)
Returns the magnitude of v
  </string>
  <string name="LSLTipText_llVecNorm">
vector llVecNorm(vector v)
Returns the v normalized
  </string>
  <string name="LSLTipText_llVecDist">
float llVecDist(vector v1, vector v2)
Returns the 3D distance between v1 and v2
  </string>
  <string name="LSLTipText_llRot2Euler">
vector llRot2Euler(rotation q)
Returns the Euler representation (roll, pitch, yaw) of q
  </string>
  <string name="LSLTipText_llEuler2Rot">
rotation llEuler2Rot(vector v)
Returns the rotation representation of Euler Angles v
  </string>
  <string name="LSLTipText_llAxes2Rot">
rotation llAxes2Rot(vector fwd, vector left, vector up)
Returns the rotation defined by the coordinate axes
  </string>
  <string name="LSLTipText_llRot2Fwd">
vector llRot2Fwd(rotation q)
Returns the forward vector defined by q
  </string>
  <string name="LSLTipText_llRot2Left">
vector llRot2Left(rotation q)
Returns the left vector defined by q
  </string>
  <string name="LSLTipText_llRot2Up">
vector llRot2Up(rotation q)
Returns the up vector defined by q
  </string>
  <string name="LSLTipText_llRotBetween">
rotation llRotBetween(vector v1, vector v2)
Returns the rotation to rotate v1 to v2
  </string>
  <string name="LSLTipText_llWhisper">
llWhisper(integer channel, string msg)
Whispers the text of msg on channel
  </string>
  <string name="LSLTipText_llSay">
llSay(integer channel, string msg)
Says the text of msg on channel
  </string>
  <string name="LSLTipText_llShout">
llShout(integer channel, string msg)
Shouts the text of msg on channel
  </string>
  <string name="LSLTipText_llListen">
integer llListen(integer channel, string name, key id, string msg)
Sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen
  </string>
  <string name="LSLTipText_llListenControl">
llListenControl(integer number, integer active)
Makes a listen event callback active or inactive
  </string>
  <string name="LSLTipText_llListenRemove">
llListenRemove(integer number)
Removes listen event callback number
  </string>
  <string name="LSLTipText_llSensor">
llSensor(string name, key id, integer type, float range, float arc)
Performs a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)
  </string>
  <string name="LSLTipText_llSensorRepeat">
llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)
Sets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds
  </string>
  <string name="LSLTipText_llSensorRemove">
llSensorRemove()
Removes the sensor setup by llSensorRepeat
  </string>
  <string name="LSLTipText_llDetectedName">
string llDetectedName(integer number)
Returns the name of detected object number (returns empty string if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedKey">
key llDetectedKey(integer number)
Returns the key of detected object number (returns empty key if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedOwner">
key llDetectedOwner(integer number)
Returns the key of detected object&apos;s owner (returns empty key if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedType">
integer llDetectedType(integer number)
Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedPos">
vector llDetectedPos(integer number)
Returns the position of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedVel">
vector llDetectedVel(integer number)
Returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedGrab">
vector llDetectedGrab(integer number)
Returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedRot">
rotation llDetectedRot(integer number)
Returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedGroup">
integer llDetectedGroup(integer number)
Returns an integer that is a boolean representing if the detected object or avatar is in the same group 
that the prim containing the script is set to
  </string>
  <string name="LSLTipText_llDetectedLinkNumber">
integer llDetectedLinkNumber(integer number)
Returns the link position of the triggered event for touches and collisions only
  </string>
  <string name="LSLTipText_llDie">
llDie()
Deletes the object
  </string>
  <string name="LSLTipText_llGround">
float llGround(vector offset)
Returns the ground height below the object position + offset
  </string>
  <string name="LSLTipText_llCloud">
float llCloud(vector offset)
Returns the cloud density at the object position + offset
  </string>
  <string name="LSLTipText_llWind">
vector llWind(vector offset)
Returns the wind velocity at the object position + offset
  </string>
  <string name="LSLTipText_llSetStatus">
llSetStatus(integer status, integer value)
Sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value
  </string>
  <string name="LSLTipText_llGetStatus">
integer llGetStatus(integer status)
Returns value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)
  </string>
  <string name="LSLTipText_llSetScale">
llSetScale(vector scale)
Sets the scale of the prim
  </string>
  <string name="LSLTipText_llGetScale">
vector llGetScale()
Returns the scale of the prim
  </string>
  <string name="LSLTipText_llSetColor">
llSetColor(vector color, integer face)
Sets the color on face of the prim
  </string>
  <string name="LSLTipText_llGetAlpha">
float llGetAlpha(integer face)
Returns the alpha of face
  </string>
  <string name="LSLTipText_llSetAlpha">
llSetAlpha(float alpha, integer face)
Sets the alpha on face
  </string>
  <string name="LSLTipText_llGetColor">
vector llGetColor(integer face)
Returns the color on face
  </string>
  <string name="LSLTipText_llSetTexture">
llSetTexture(string texture, integer face)
Sets the texture of face or ALL_SIDES
  </string>
  <string name="LSLTipText_llScaleTexture">
llScaleTexture(float u, float v, integer face)
Sets the texture u &amp; v scales for the chosen face or ALL_SIDES
  </string>
  <string name="LSLTipText_llOffsetTexture">
llOffsetTexture(float u, float v, integer face)
Sets the texture u &amp; v offsets for the chosen face or ALL_SIDES
  </string>
  <string name="LSLTipText_llRotateTexture">
llRotateTexture(float rotation, integer face)
Sets the texture rotation for the chosen face
  </string>
  <string name="LSLTipText_llGetTexture">
string llGetTexture(integer face)
Returns a string that is the texture on face (the inventory name if it is a texture in the prim&apos;s inventory, otherwise the key)
  </string>
  <string name="LSLTipText_llSetPos">
llSetPos(vector pos)
Moves the object or prim towards pos without using physics (if the script isn&apos;t physical)
  </string>
  <string name="LSLTipText_llGetPos">
vector llGetPos()
Returns the position of the task in region coordinates
  </string>
  <string name="LSLTipText_llGetLocalPos">
vector llGetLocalPos()
Returns the position relative to the root
  </string>
  <string name="LSLTipText_llSetRot">
llSetRot(rotation rot)
Sets the rotation
  </string>
  <string name="LSLTipText_llGetRot">
rotation llGetRot()
Returns the rotation relative to the region&apos;s axes
  </string>
  <string name="LSLTipText_llGetLocalRot">
rotation llGetLocalRot()
Returns the rotation local to the root
  </string>
  <string name="LSLTipText_llSetForce">
llSetForce(vector force, integer local)
Applies force to the object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetForce">
vector llGetForce()
Returns the force (if the script is physical)
  </string>
  <string name="LSLTipText_llTarget">
integer llTarget(vector position, float range)
Sets positions within range of position as a target and return an ID for the target
  </string>
  <string name="LSLTipText_llTargetRemove">
llTargetRemove(integer number)
Removes positional target number registered with llTarget
  </string>
  <string name="LSLTipText_llRotTarget">
integer llRotTarget(rotation rot, float error)
Set rotations with error of rot as a rotational target and return an ID for the rotational target
  </string>
  <string name="LSLTipText_llRotTargetRemove">
llRotTargetRemove(integer number)
Removes rotational target number registered with llRotTarget
  </string>
  <string name="LSLTipText_llMoveToTarget">
llMoveToTarget(vector target, float tau)
Critically damps to target in tau seconds (if the script is physical)
  </string>
  <string name="LSLTipText_llStopMoveToTarget">
llStopMoveToTarget()
Stops critically damped motion
  </string>
  <string name="LSLTipText_llApplyImpulse">
llApplyImpulse(vector force, integer local)
Applies impulse to object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llApplyRotationalImpulse">
llApplyRotationalImpulse(vector force, integer local)
Applies rotational impulse to object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llSetTorque">
llSetTorque(vector torque, integer local)
Sets the torque of object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetTorque">
vector llGetTorque()
Returns the torque (if the script is physical)
  </string>
  <string name="LSLTipText_llSetForceAndTorque">
llSetForceAndTorque(vector force, vector torque, integer local)
Sets the force and torque of object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetVel">
vector llGetVel()
Returns the velocity of the object
  </string>
  <string name="LSLTipText_llGetAccel">
vector llGetAccel()
Returns the acceleration of the object relative to the region&apos;s axes
  </string>
  <string name="LSLTipText_llGetOmega">
vector llGetOmega()
Returns the rotation velocity in radians per second
  </string>
  <string name="LSLTipText_llGetTimeOfDay">
float llGetTimeOfDay()
Returns the time in seconds since [SECOND_LIFE] server midnight or since region up-time, whichever is smaller
  </string>
  <string name="LSLTipText_llGetWallclock">
float llGetWallclock()
Returns the time in seconds since midnight California Pacific time (PST/PDT)
  </string>
  <string name="LSLTipText_llGetTime">
float llGetTime()
Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime
  </string>
  <string name="LSLTipText_llResetTime">
llResetTime()
Sets the script timer to zero
  </string>
  <string name="LSLTipText_llGetAndResetTime">
float llGetAndResetTime()
Returns the script time in seconds and then resets the script timer to zero
  </string>
  <string name="LSLTipText_llSound">
llSound(string sound, float volume, integer queue, integer loop)
Plays sound at volume and whether it should loop or not
  </string>
  <string name="LSLTipText_llPlaySound">
llPlaySound(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llLoopSound">
llLoopSound(string sound, float volume)
Plays attached sound looping indefinitely at volume (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llLoopSoundMaster">
llLoopSoundMaster(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), declares it a sync master
  </string>
  <string name="LSLTipText_llLoopSoundSlave">
llLoopSoundSlave(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master
  </string>
  <string name="LSLTipText_llPlaySoundSlave">
llPlaySoundSlave(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master
  </string>
  <string name="LSLTipText_llTriggerSound">
llTriggerSound(string sound, float volume)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object
  </string>
  <string name="LSLTipText_llStopSound">
llStopSound()
Stops currently attached sound
  </string>
  <string name="LSLTipText_llPreloadSound">
llPreloadSound(string sound)
Preloads a sound on viewers within range
  </string>
  <string name="LSLTipText_llGetSubString">
string llGetSubString(string src, integer start, integer end)
Returns the indicated substring
  </string>
  <string name="LSLTipText_llDeleteSubString">
string llDeleteSubString(string src, integer start, integer end)
Removes the indicated substring and returns the result
  </string>
  <string name="LSLTipText_llInsertString">
string llInsertString(string dst, integer position, string src)
Returns a destination string dst with the string src inserted starting at position pos
  </string>
  <string name="LSLTipText_llToUpper">
string llToUpper(string src)
Returns a string that is src with all upper-case characters
  </string>
  <string name="LSLTipText_llToLower">
string llToLower(string src)
Returns a string that is src with all lower-case characters
  </string>
  <string name="LSLTipText_llGiveMoney">
llGiveMoney(key destination, integer amount)
Transfers amount of L$ from script owner to destination
  </string>
  <string name="LSLTipText_llMakeExplosion">
llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes a round explosion of particles
  </string>
  <string name="LSLTipText_llMakeFountain">
llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)
Makes a fountain of particles
  </string>
  <string name="LSLTipText_llMakeSmoke">
llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes smoke like particles
  </string>
  <string name="LSLTipText_llMakeFire">
llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes fire like particles
  </string>
  <string name="LSLTipText_llRezObject">
llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object at pos with velocity vel and rotation rot with start parameter param
  </string>
  <string name="LSLTipText_llLookAt">
llLookAt(vector target, float strength, float damping)
Causes object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon
  </string>
  <string name="LSLTipText_llStopLookAt">
llStopLookAt()
Stops causing object to point at a target
  </string>
  <string name="LSLTipText_llSetTimerEvent">
llSetTimerEvent(float sec)
Causes the timer event to be triggered a maximum of once every sec seconds
  </string>
  <string name="LSLTipText_llSleep">
llSleep(float sec)
Puts the script to sleep for sec seconds
  </string>
  <string name="LSLTipText_llGetMass">
float llGetMass()
Returns the mass of object that the script is attached to
  </string>
  <string name="LSLTipText_llCollisionFilter">
llCollisionFilter(string name, key id, integer accept)
Sets the collision filter, exclusively or inclusively. If accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id
  </string>
  <string name="LSLTipText_llTakeControls">
llTakeControls(integer controls, integer accept, integer pass_on)
Allows for intercepting keyboard and mouse clicks from the agent the script has permissions for
  </string>
  <string name="LSLTipText_llReleaseControls">
llReleaseControls()
Stops taking inputs that were taken with llTakeControls
  </string>
  <string name="LSLTipText_llAttachToAvatar">
llAttachToAvatar(integer attach_point)
Attaches the object on attach_point to the avatar who has granted permission to the script.
  </string>
  <string name="LSLTipText_llDetachFromAvatar">
llDetachFromAvatar()
Detaches object from avatar
  </string>
  <string name="LSLTipText_llTakeCamera">
llTakeCamera(key avatar)
Moves avatar&apos;s viewpoint to task
  </string>
  <string name="LSLTipText_llReleaseCamera">
llReleaseCamera(key avatar)
Returns camera to agent avatar
  </string>
  <string name="LSLTipText_llGetOwner">
key llGetOwner()
Returns the object owner&apos;s UUID
  </string>
  <string name="LSLTipText_llInstantMessage">
llInstantMessage(key user, string message)
Sends the specified string as an Instant Message to the user
  </string>
  <string name="LSLTipText_llEmail">
llEmail(string address, string subject, string message)
Sends an email to address with the subject and message
  </string>
  <string name="LSLTipText_llGetNextEmail">
llGetNextEmail(string address, string subject)
Gets the next waiting email that comes from address, with specified subject
  </string>
  <string name="LSLTipText_llGetKey">
key llGetKey()
Returns the key of the prim the script is attached to
  </string>
  <string name="LSLTipText_llSetBuoyancy">
llSetBuoyancy(float buoyancy)
Sets the buoyancy of the task or object (0 is disabled, &lt; 1.0 sinks, 1.0 floats, &gt; 1.0 rises)
  </string>
  <string name="LSLTipText_llSetHoverHeight">
llSetHoverHeight(float height, integer water, float tau)
Critically damps to a height above the ground (or water) in tau seconds
  </string>
  <string name="LSLTipText_llStopHover">
llStopHover()
Stops hovering to a height
  </string>
  <string name="LSLTipText_llMinEventDelay">
llMinEventDelay(float delay)
Sets the minimum time between events being handled
  </string>
  <string name="LSLTipText_llSoundPreload">
llSoundPreload(string sound)
Preloads a sound on viewers within range
  </string>
  <string name="LSLTipText_llRotLookAt">
llRotLookAt(rotation target, float strength, float damping)
Causes object to point its forward axis towards target
  </string>
  <string name="LSLTipText_llStringLength">
integer llStringLength(string str)
Returns the length of string
  </string>
  <string name="LSLTipText_llStartAnimation">
llStartAnimation(string anim)
Starts animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked
  </string>
  <string name="LSLTipText_llStopAnimation">
llStopAnimation(string anim)
Stops animation anim for agent that granted permission
  </string>
  <string name="LSLTipText_llPointAt">
llPointAt(vector pos)
Makes agent that owns object point at pos
  </string>
  <string name="LSLTipText_llStopPointAt">
llStopPointAt()
Stops pointing agent that owns object
  </string>
  <string name="LSLTipText_llTargetOmega">
llTargetOmega(vector axis, float spinrate, float gain)
Rotates the object around axis at spinrate with strength gain
  </string>
  <string name="LSLTipText_llGetStartParameter">
integer llGetStartParameter()
Returns an integer that is the script start/rez parameter
  </string>
  <string name="LSLTipText_llGodLikeRezObject">
llGodLikeRezObject(key inventory, vector pos)
Rezzes directly off of UUID if owner is in God Mode
  </string>
  <string name="LSLTipText_llRequestPermissions">
llRequestPermissions(key agent, integer perm)
Asks the agent for permission to run certain classes of functions
  </string>
  <string name="LSLTipText_llGetPermissionsKey">
key llGetPermissionsKey()
Returns the key of the avatar that last granted permissions to the script
  </string>
  <string name="LSLTipText_llGetPermissions">
integer llGetPermissions()
Returns an integer bitfield with the permissions that have been granted
  </string>
  <string name="LSLTipText_llGetLinkNumber">
integer llGetLinkNumber()
Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc)
  </string>
  <string name="LSLTipText_llSetLinkColor">
llSetLinkColor(integer linknumber, vector color, integer face)
Sets face to color if a task exists in the link chain at linknumber
  </string>
  <string name="LSLTipText_llCreateLink">
llCreateLink(key target, integer parent)
Attempts to link the script&apos;s object with the target (requires that PERMISSION_CHANGE_LINKS be granted). If parent == TRUE, then the script&apos;s object becomes the root
  </string>
  <string name="LSLTipText_llBreakLink">
llBreakLink(integer linknum)
Delinks the prim with the given link number in a linked object set (requires that PERMISSION_CHANGE_LINKS be granted)
  </string>
  <string name="LSLTipText_llBreakAllLinks">
llBreakAllLinks()
Delinks all prims in the link set (requires that PERMISSION_CHANGE_LINKS be granted)
  </string>
  <string name="LSLTipText_llGetLinkKey">
key llGetLinkKey(integer linknumber)
Returns the key of the linked prim linknumber
  </string>
  <string name="LSLTipText_llGetLinkName">
string llGetLinkName(integer linknumber)
Returns the name of linknumber in a link set
  </string>
  <string name="LSLTipText_llGetInventoryNumber">
integer llGetInventoryNumber(integer type)
Returns the number of items of a given type (INVENTORY_* flag) in the prim&apos;s inventory
  </string>
  <string name="LSLTipText_llGetInventoryName">
string llGetInventoryName(integer type, integer number)
Returns the name of the inventory item number of a given type
  </string>
  <string name="LSLTipText_llSetScriptState">
llSetScriptState(string name, integer run)
Sets the running state of the specified script
  </string>
  <string name="LSLTipText_llGetEnergy">
float llGetEnergy()
Returns how much energy is in the object as a percentage of maximum
  </string>
  <string name="LSLTipText_llGiveInventory">
llGiveInventory(key destination, string inventory)
Gives inventory to destination
  </string>
  <string name="LSLTipText_llRemoveInventory">
llRemoveInventory(string item)
Removes the named inventory item
  </string>
  <string name="LSLTipText_llSetText">
llSetText(string text, vector color, float alpha)
Displays text that hovers over the prim with specific color and translucency specified with alpha
  </string>
  <string name="LSLTipText_llWater">
float llWater(vector offset)
Returns the water height below the object position + offset
  </string>
  <string name="LSLTipText_llPassTouches">
llPassTouches(integer pass)
If pass == TRUE, touches are passed from children on to parents
  </string>
  <string name="LSLTipText_llRequestAgentData">
key llRequestAgentData(key id, integer data)
Requests data about agent id. When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llRequestInventoryData">
key llRequestInventoryData(string name)
Requests data from object&apos;s inventory object. When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llSetDamage">
llSetDamage(float damage)
Sets the amount of damage that will be done when this object hits an avatar.
  </string>
  <string name="LSLTipText_llTeleportAgentHome">
llTeleportAgentHome(key id)
Teleports avatar on the owner&apos;s land to their home location without any warning
  </string>
  <string name="LSLTipText_llModifyLand">
llModifyLand(integer action, integer brush)
Modifies land using the specified action on the specified brush size of land
  </string>
  <string name="LSLTipText_llCollisionSound">
llCollisionSound(string impact_sound, float impact_volume)
Suppresses default collision sounds, replaces default impact sounds with impact_sound at the volume impact_volume
  </string>
  <string name="LSLTipText_llCollisionSprite">
llCollisionSprite(string impact_sprite)
Suppresses default collision sprites, replaces default impact sprite with impact_sprite (use an empty string to just suppress)
  </string>
  <string name="LSLTipText_llGetAnimation">
string llGetAnimation(key id)
Returns the name of the currently playing locomotion animation for avatar id
  </string>
  <string name="LSLTipText_llResetScript">
llResetScript()
Resets the script
  </string>
  <string name="LSLTipText_llMessageLinked">
llMessageLinked(integer linknum, integer num, string str, key id)
Allows scripts in the same object to communicate. Triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by linknum.
  </string>
  <string name="LSLTipText_llPushObject">
llPushObject(key id, vector impulse, vector ang_impulse, integer local)
Applies impulse and ang_impulse to object id
  </string>
  <string name="LSLTipText_llPassCollisions">
llPassCollisions(integer pass)
If pass == TRUE, collisions are passed from children on to parents (default is FALSE)
  </string>
  <string name="LSLTipText_llGetScriptName">
string llGetScriptName()
Returns the name of the script that this function is used in
  </string>
  <string name="LSLTipText_llGetNumberOfSides">
integer llGetNumberOfSides()
Returns the number of faces (or sides) of the prim
  </string>
  <string name="LSLTipText_llAxisAngle2Rot">
rotation llAxisAngle2Rot(vector axis, float angle)
Returns the rotation that is a generated angle about axis
  </string>
  <string name="LSLTipText_llRot2Axis">
vector llRot2Axis(rotation rot)
Returns the rotation axis represented by rot
  </string>
  <string name="LSLTipText_llRot2Angle">
float llRot2Angle(rotation rot)
Returns the rotation angle represented by rot
  </string>
  <string name="LSLTipText_llAcos">
float llAcos(float val)
Returns the arccosine in radians of val
  </string>
  <string name="LSLTipText_llAsin">
float llAsin(float val)
Returns the arcsine in radians of val
  </string>
  <string name="LSLTipText_llAngleBetween">
float llAngleBetween(rotation a, rotation b)
Returns angle between rotation a and b
  </string>
  <string name="LSLTipText_llGetInventoryKey">
key llGetInventoryKey(string name)
Returns the key that is the UUID of the inventory name
  </string>
  <string name="LSLTipText_llAllowInventoryDrop">
llAllowInventoryDrop(integer add)
If add == TRUE, users without modify permissions can still drop inventory items onto a prim
  </string>
  <string name="LSLTipText_llGetSunDirection">
vector llGetSunDirection()
Returns a normalized vector of the direction of the sun in the region
  </string>
  <string name="LSLTipText_llGetTextureOffset">
vector llGetTextureOffset(integer face)
Returns the texture offset of face in the x and y components of a vector
  </string>
  <string name="LSLTipText_llGetTextureScale">
vector llGetTextureScale(integer side)
Returns the texture scale of side in the x and y components of a vector
  </string>
  <string name="LSLTipText_llGetTextureRot">
float llGetTextureRot(integer side)
Returns the texture rotation of side
  </string>
  <string name="LSLTipText_llSubStringIndex">
integer llSubStringIndex(string source, string pattern)
Returns an integer that is the index in source where pattern first appears.
(Returns -1 if not found)
  </string>
  <string name="LSLTipText_llGetOwnerKey">
key llGetOwnerKey(key id)
Returns the owner of object id
  </string>
  <string name="LSLTipText_llGetCenterOfMass">
vector llGetCenterOfMass()
Returns the prim&apos;s center of mass (unless called from the root prim, where it returns the object&apos;s center of mass)
  </string>
  <string name="LSLTipText_llListSort">
list llListSort(list src, integer stride, integer ascending)
Sorts the list into blocks of stride, in ascending order if ascending == TRUE.
The sort order is affected by type.
  </string>
  <string name="LSLTipText_llGetListLength">
integer llGetListLength(list src)
Returns the number of elements in the list
  </string>
  <string name="LSLTipText_llList2Integer">
integer llList2Integer(list src, integer index)
Copies the integer at index in the list
  </string>
  <string name="LSLTipText_llList2Float">
float llList2Float(list src, integer index)
Copies the float at index in the list
  </string>
  <string name="LSLTipText_llList2String">
string llList2String(list src, integer index)
Copies the string at index in the list
  </string>
  <string name="LSLTipText_llList2Key">
key llList2Key(list src, integer index)
Copies the key at index in the list
  </string>
  <string name="LSLTipText_llList2Vector">
vector llList2Vector(list src, integer index)
Copies the vector at index in the list
  </string>
  <string name="LSLTipText_llList2Rot">
rotation llList2Rot(list src, integer index)
Copies the rotation at index in the list
  </string>
  <string name="LSLTipText_llList2List">
list llList2List(list src, integer start, integer end)
Copies the slice of the list from start to end
  </string>
  <string name="LSLTipText_llDeleteSubList">
list llDeleteSubList(list src, integer start, integer end)
Removes the slice from start to end and returns the remainder of the list
  </string>
  <string name="LSLTipText_llGetListEntryType">
integer llGetListEntryType(list src, integer index)
Returns the type of the index entry in the list
(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)
  </string>
  <string name="LSLTipText_llList2CSV">
string llList2CSV(list src)
Creates a string of comma separated values from list
  </string>
  <string name="LSLTipText_llCSV2List">
list llCSV2List(string src)
Creates a list from a string of comma separated values
  </string>
  <string name="LSLTipText_llListRandomize">
list llListRandomize(list src, integer stride)
Returns a randomized list of blocks of size stride
  </string>
  <string name="LSLTipText_llList2ListStrided">
list llList2ListStrided(list src, integer start, integer end, integer stride)
Copies the strided slice of the list from start to end
  </string>
  <string name="LSLTipText_llGetRegionCorner">
vector llGetRegionCorner()
Returns a vector in meters that is the global location of the south-west corner of the region which the object is in
  </string>
  <string name="LSLTipText_llListInsertList">
list llListInsertList(list dest, list src, integer start)
Returns a list that contains all the elements from dest but with the elements from src inserted at position start
  </string>
  <string name="LSLTipText_llListFindList">
integer llListFindList(list src, list test)
Returns the index of the first instance of test in src.
(Returns -1 if not found)
  </string>
  <string name="LSLTipText_llGetObjectName">
string llGetObjectName()
Returns the name of the prim which the script is attached to
  </string>
  <string name="LSLTipText_llSetObjectName">
llSetObjectName(string name)
Sets the prim&apos;s name to the name parameter
  </string>
  <string name="LSLTipText_llGetDate">
string llGetDate()
Returns the current date in the UTC time zone in the format YYYY-MM-DD
  </string>
  <string name="LSLTipText_llEdgeOfWorld">
integer llEdgeOfWorld(vector pos, vector dir)
Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring region)
  </string>
  <string name="LSLTipText_llGetAgentInfo">
integer llGetAgentInfo(key id)
Returns an integer bitfield containing the agent information about id.
Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.
  </string>
  <string name="LSLTipText_llAdjustSoundVolume">
llAdjustSoundVolume(float volume)
Adjusts volume of attached sound (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llSetSoundQueueing">
llSetSoundQueueing(integer queue)
Sets whether attached sounds wait for the current sound to finish (If queue == TRUE then queuing is enabled, if FALSE queuing is disabled [default])
  </string>
  <string name="LSLTipText_llSetSoundRadius">
llSetSoundRadius(float radius)
Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)
  </string>
  <string name="LSLTipText_llKey2Name">
string llKey2Name(key id)
Returns the name of the prim or avatar specified by id.
(The id must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.)
  </string>
  <string name="LSLTipText_llSetTextureAnim">
llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Animates the texture on the specified face/faces
  </string>
  <string name="LSLTipText_llTriggerSoundLimited">
llTriggerSoundLimited(string sound, float volume, vector top_north_east, vector bottom_south_west)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to the box defined by vectors top_north_east and bottom_south_west
  </string>
  <string name="LSLTipText_llEjectFromLand">
llEjectFromLand(key avatar)
Ejects avatar from the parcel
  </string>
  <string name="LSLTipText_llParseString2List">
list llParseString2List(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers
(separators and spacers must be lists of strings, maximum of 8 each)
  </string>
  <string name="LSLTipText_llOverMyLand">
integer llOverMyLand(key id)
Returns TRUE if id is over land owned by the script owner, otherwise FALSE
  </string>
  <string name="LSLTipText_llGetLandOwnerAt">
key llGetLandOwnerAt(vector pos)
Returns the key of the land owner, returns NULL_KEY if public
  </string>
  <string name="LSLTipText_llGetNotecardLine">
key llGetNotecardLine(string name, integer line)
Returns line line of notecard name via the dataserver event
  </string>
  <string name="LSLTipText_llGetAgentSize">
vector llGetAgentSize(key id)
If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR
  </string>
  <string name="LSLTipText_llSameGroup">
integer llSameGroup(key id)
Returns TRUE if avatar id is in the same region and has the same active group, otherwise FALSE
  </string>
  <string name="LSLTipText_llUnSit">
key llUnSit(key id)
If avatar identified by id is sitting on the object the script is attached to or is over land owned by the object&apos;s owner, the avatar is forced to stand up
  </string>
  <string name="LSLTipText_llGroundSlope">
vector llGroundSlope(vector offset)
Returns the ground slope below the object position + offset
  </string>
  <string name="LSLTipText_llGroundNormal">
vector llGroundNormal(vector offset)
Returns the ground normal below the object position + offset
  </string>
  <string name="LSLTipText_llGroundContour">
vector llGroundCountour(vector offset)
Returns the ground contour direction below the object position + offset
  </string>
  <string name="LSLTipText_llGetAttached">
integer llGetAttached()
Returns the object&apos;s attachment point, or 0 if not attached
  </string>
  <string name="LSLTipText_llGetFreeMemory">
integer llGetFreeMemory()
Returns the number of free bytes of memory the script can use
  </string>
  <string name="LSLTipText_llGetRegionName">
string llGetRegionName()
Returns the current region name
  </string>
  <string name="LSLTipText_llGetRegionTimeDilation">
float llGetRegionTimeDilation()
Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation)
  </string>
  <string name="LSLTipText_llGetRegionFPS">
float llGetRegionFPS()
Returns the mean region frames per second
  </string>
  <string name="LSLTipText_llParticleSystem">
llParticleSystem(list rules)
Creates a particle system based on rules.  An empty list removes the particle system.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
  </string>
  <string name="LSLTipText_llGroundRepel">
llGroundRepel(float height, integer water, float tau)
Critically damps to height if within height*0.5 of level (either above ground level, or above the higher of land and water if water == TRUE)
  </string>
  <string name="LSLTipText_llGiveInventoryList">
llGiveInventoryList(key target, string folder, list inventory)
Gives inventory items to target, creating a new folder to put them in
  </string>
  <string name="LSLTipText_llSetVehicleType">
llSetVehicleType(integer type)
Sets the vehicle to one of the default types
  </string>
  <string name="LSLTipText_llSetVehicleFloatParam">
llSetVehicleFloatParam(integer param, float value)
Sets the specified vehicle float parameter
  </string>
  <string name="LSLTipText_llSetVehicleVectorParam">
llSetVehicleVectorParam(integer param, vector vec)
Sets the specified vehicle vector parameter
  </string>
  <string name="LSLTipText_llSetVehicleRotationParam">
llSetVehicleVectorParam(integer param, rotation rot)
Sets the specified vehicle rotation parameter
  </string>
  <string name="LSLTipText_llSetVehicleFlags">
llSetVehicleFlags(integer flags)
Sets the enabled bits in &apos;flags&apos;
  </string>
  <string name="LSLTipText_llRemoveVehicleFlags">
llRemoveVehicleFlags(integer flags)
Removes the enabled bits in &apos;flags&apos;
  </string>
  <string name="LSLTipText_llSitTarget">
llSitTarget(vector offset, rotation rot)
Sets the sit location for the prim.  If offset == &lt;0,0,0&gt; then the sit target is removed.
  </string>
  <string name="LSLTipText_llAvatarOnSitTarget">
key llAvatarOnSitTarget()
If an avatar is seated on the sit target, returns the avatar&apos;s key, otherwise NULL_KEY
  </string>
  <string name="LSLTipText_llAddToLandPassList">
llAddToLandPassList(key avatar, float hours)
Adds avatar to the land pass list for hours, or indefinitely if hours is 0
  </string>
  <string name="LSLTipText_llSetTouchText">
llSetTouchText(string text)
Displays text rather than the default &apos;Touch&apos; in the pie menu
  </string>
  <string name="LSLTipText_llSetSitText">
llSetSitText(string text)
Displays text rather than the default &apos;Sit Here&apos; in the pie menu
  </string>
  <string name="LSLTipText_llSetCameraEyeOffset">
llSetCameraEyeOffset(vector offset)
Sets the camera eye offset for avatars that sit on the object
  </string>
  <string name="LSLTipText_llSetCameraAtOffset">
llSetCameraAtOffset(vector offset)
Sets the point the camera is looking at to offset for avatars that sit on the object
  </string>
  <string name="LSLTipText_llDumpList2String">
string llDumpList2String(list src, string separator)
Returns the list in a single string, using separator between the entries
  </string>
  <string name="LSLTipText_llScriptDanger">
integer llScriptDanger(vector pos)
Returns TRUE if pos is over public land, sandbox land, land that doesn&apos;t allow everyone to edit and build, or land that doesn&apos;t allow outside scripts
  </string>
  <string name="LSLTipText_llDialog">
llDialog(key avatar, string message, list buttons, integer chat_channel
Shows a dialog box on the avatar&apos;s screen with a message and up to 12 buttons.
If a button is pressed, the avatar says the text of the button label on chat_channel.
  </string>
  <string name="LSLTipText_llVolumeDetect">
llVolumeDetect(integer detect)
If detect = TRUE, object works much like Phantom, but triggers collision_start and collision_end events when other objects start and stop interpenetrating.
Must be applied to the root prim.
  </string>
  <string name="LSLTipText_llResetOtherScript">
llResetOtherScript(string name)
Resets script name
  </string>
  <string name="LSLTipText_llGetScriptState">
integer llGetScriptState(string name)
Returns TRUE if the script name is running
  </string>
  <string name="LSLTipText_llRemoteLoadScript">
DEPRECATED!  Please use llRemoteLoadScriptPin instead.
  </string>
  <string name="LSLTipText_llSetRemoteScriptAccessPin">
llSetRemoteScriptAccessPin(integer pin)
If pin is set to a non-zero number, allows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it passes in the correct pin. Otherwise, llRemoteLoadScriptPin is ignored.
  </string>
  <string name="LSLTipText_llRemoteLoadScriptPin">
llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)
Copies script name onto target, if the owner of this scripted object can modify target and is in the same region, and the matching pin is used.
If running == TRUE, starts the script with start_param
  </string>
  <string name="LSLTipText_llOpenRemoteDataChannel">
llOpenRemoteDataChannel()
Creates a channel to listen for XML-RPC calls, and will trigger a remote_data event with channel id once it is available
  </string>
  <string name="LSLTipText_llSendRemoteData">
key llSendRemoteData(key channel, string dest, integer idata, string sdata)
Sends an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.
Returns a key that is the message_id for the resulting remote_data events.
  </string>
  <string name="LSLTipText_llRemoteDataReply">
llRemoteDataReply(key channel, key message_id, string sdata, integer idata)
Sends an XML-RPC reply to message_id on channel with payload of string sdata and integer idata
  </string>
  <string name="LSLTipText_llCloseRemoteDataChannel">
llCloseRemoteDataChannel(key channel)
Closes XML-RPC channel
  </string>
  <string name="LSLTipText_llMD5String">
string llMD5String(string src, integer nonce)
Returns a string of 32 hex characters that is a RSA Data Security, Inc. MD5 Message-Digest Algorithm of src with nonce
  </string>
  <string name="LSLTipText_llSetPrimitiveParams">
llSetPrimitiveParams(list rules)
Sets the prim&apos;s parameters according to rules
  </string>
  <string name="LSLTipText_llStringToBase64">
string llStringToBase64(string str)
Converts a string to the Base64 representation of the string
  </string>
  <string name="LSLTipText_llBase64ToString">
string llBase64ToString(string str)
Converts a Base64 string to a conventional string.
If the conversion creates any unprintable characters, they are converted to spaces.
  </string>
  <string name="LSLTipText_llXorBase64Strings">
string llXorBase64Strings(string s1, string s2)
DEPRECATED!  Please use llXorBase64StringsCorrect instead.
Incorrectly performs an exclusive or on two Base64 strings and returns a Base64 string.  s2 repeats if it is shorter than s1.  Retained for backwards compatability.
  </string>
  <string name="LSLTipText_llRemoteDataSetRegion">
llRemoteDataSetRegion()
DEPRECATED!  Please use llOpenRemoteDataChannel instead.
If an object using remote data channels changes regions, you must call this function to reregister the remote data channels. This call is not needed if the prim does not change regions.
  </string>
  <string name="LSLTipText_llLog10">
float llLog10(float val)
Returns the base 10 logarithm of val.  Returns zero if val &lt;= 0.
  </string>
  <string name="LSLTipText_llLog">
float llLog(float val)
Returns the natural logarithm of val.  Returns zero if val &lt;= 0.
  </string>
  <string name="LSLTipText_llGetAnimationList">
list llGetAnimationList(key id)
Returns a list of keys of playing animations for avatar described by id
  </string>
  <string name="LSLTipText_llSetParcelMusicURL">
llSetParcelMusicURL(string url)
Sets the streaming audio URL for the parcel which the object is on
  </string>
  <string name="LSLTipText_llGetRootPosition">
vector llGetRootPosition()
Returns the position (in region coordinates) of the root prim of the object which the script is attached to
  </string>
  <string name="LSLTipText_llGetRootRotation">
rotation llGetRootRotation()
Returns the rotation (relative to the region) of the root prim of the object which the script is attached to
  </string>
  <string name="LSLTipText_llGetObjectDesc">
string llGetObjectDesc()
Returns the description of the prim the script is attached to
  </string>
  <string name="LSLTipText_llSetObjectDesc">
llSetObjectDesc(string name)
Sets the prim&apos;s description
  </string>
  <string name="LSLTipText_llGetCreator">
key llGetCreator()
Returns a key for the creator of the prim
  </string>
  <string name="LSLTipText_llGetTimestamp">
string llGetTimestamp()
Returns the timestamp in the UTC time zone in the format: YYYY-MM-DDThh:mm:ss.ff..fZ
  </string>
  <string name="LSLTipText_llSetLinkAlpha">
llSetLinkAlpha(integer linknumber, float alpha, integer face)
If a prim exists in the link chain at linknumber, sets face to alpha
  </string>
  <string name="LSLTipText_llGetNumberOfPrims">
integer llGetNumberOfPrims()
Returns the number of prims in a link set the script is attached to
  </string>
  <string name="LSLTipText_llGetNumberOfNotecardLines">
key llGetNumberOfNotecardLines(string name)
Returns number of lines in notecard name via the dataserver event (cast return value to integer)
  </string>
  <string name="LSLTipText_llGetBoundingBox">
list llGetBoundingBox(key object)
Returns the bounding box around the object (including any linked prims) relative to its root prim, in a list in the format [ (vector) min_corner, (vector) max_corner ]
  </string>
  <string name="LSLTipText_llGetGeometricCenter">
vector llGetGeometricCenter()
Returns the geometric center of the linked set the script is attached to.
  </string>
  <string name="LSLTipText_llGetPrimitiveParams">
list llGetPrimitiveParams(list params)
Returns the primitive parameters specified in the params list.
  </string>
  <string name="LSLTipText_llIntegerToBase64">
string llIntegerToBase64(integer number)
Returns a string that is a Base64 big endian encode of number
  </string>
  <string name="LSLTipText_llBase64ToInteger">
integer llBase64ToInteger(string str)
Returns an integer that is the str Base64 decoded as a big endian integer
  </string>
  <string name="LSLTipText_llGetGMTclock">
float llGetGMTclock()
Returns the time in seconds since midnight GMT
  </string>
  <string name="LSLTipText_llGetSimulatorHostname">
string llGetSimulatorHostname()
Returns the hostname of the machine which the script is running on (same as string in viewer Help dialog)
  </string>
  <string name="LSLTipText_llSetLocalRot">
llSetLocalRot(rotation rot)
Sets the rotation of a child prim relative to the root prim
  </string>
  <string name="LSLTipText_llParseStringKeepNulls">
list llParseStringKeepNulls(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers, keeping any null values generated.
(separators and spacers must be lists of strings, maximum of 8 each)
  </string>
  <string name="LSLTipText_llRezAtRoot">
llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object rotated to rot with its root at pos, moving at vel, using param as the start parameter
  </string>
  <string name="LSLTipText_llGetObjectPermMask">
integer llGetObjectPermMask(integer mask)
Returns the requested permission mask for the root object the task is attached to
  </string>
  <string name="LSLTipText_llSetObjectPermMask">
llSetObjectPermMask(integer mask, integer value)
Sets the given permission mask to the new value on the root object the task is attached to (requires God Mode)
  </string>
  <string name="LSLTipText_llGetInventoryPermMask">
integer llGetInventoryPermMask(string item, integer mask)
Returns the requested permission mask for the inventory item
  </string>
  <string name="LSLTipText_llSetInventoryPermMask">
llSetInventoryPermMask(string item, integer mask, integer value)
Sets the given permission mask to the new value on the inventory item (requires God Mode)
  </string>
  <string name="LSLTipText_llGetInventoryCreator">
key llGetInventoryCreator(string item)
Returns a key for the creator of the inventory item
  </string>
  <string name="LSLTipText_llOwnerSay">
llOwnerSay(string msg)
Says msg to owner only.  (Owner must be in the same region.)
  </string>
  <string name="LSLTipText_llRequestSimulatorData">
key llRequestSimulatorData(string simulator, integer data)
Requests data about simulator.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llForceMouselook">
llForceMouselook(integer mouselook)
If mouselook is TRUE, any avatar that sits upon the prim will be forced into mouselook mode
  </string>
  <string name="LSLTipText_llGetObjectMass">
float llGetObjectMass(key id)
Returns the mass of the avatar or object in the region
  </string>
  <string name="LSLTipText_llListReplaceList">
list llListReplaceList(list dest, list src, integer start, integer end)
Returns a list that is dest with start through end removed and src inserted at start
  </string>
  <string name="LSLTipText_llLoadURL">
llLoadURL(key avatar, string message, string url)
Shows a dialog to avatar offering to load the web page at url with a message.
If user clicks yes, launches the page in their web browser.
  </string>
  <string name="LSLTipText_llParcelMediaCommandList">
llParcelMediaCommandList(list command)
Sends a list of commands, some with arguments, to a parcel to control the playback of movies and other media
  </string>
  <string name="LSLTipText_llParcelMediaQuery">
list llParcelMediaQuery(list query)
Returns a list containing results of the sent query
  </string>
  <string name="LSLTipText_llModPow">
integer llModPow(integer a, integer b, integer c)
Returns a raised to the b power, mod c. ( (a**b)%c )
b is capped at 0xFFFF (16 bits).
  </string>
  <string name="LSLTipText_llGetInventoryType">
integer llGetInventoryType(string name)
Returns the type of the inventory item name
  </string>
  <string name="LSLTipText_llSetPayPrice">
llSetPayPrice(integer price, list quick_pay_buttons)
Sets the default amount on the dialog that appears when someone chooses to pay this prim
  </string>
  <string name="LSLTipText_llGetCameraPos">
vector llGetCameraPos()
Returns the current camera position for the agent the task has permissions for
  </string>
  <string name="LSLTipText_llGetCameraRot">
rotation llGetCameraRot()
Returns the current camera orientation for the agent the task has permissions for
  </string>
  <string name="LSLTipText_llSetPrimURL">
llSetPrimURL(string url)
Updates the URL for the web page shown on the sides of the object
  </string>
  <string name="LSLTipText_llRefreshPrimURL">
llRefreshPrimURL()
Reloads the web page shown on the sides of the object
  </string>
  <string name="LSLTipText_llEscapeURL">
string llEscapeURL(string url)
Returns an escaped/encoded version of url, replacing spaces with %20 etc.
  </string>
  <string name="LSLTipText_llUnescapeURL">
string llUnescapeURL(string url)
Returns an unescaped/ unencoded version of url, replacing %20 with spaces etc.
  </string>
  <string name="LSLTipText_llMapDestination">
llMapDestination(string simname, vector pos, vector look_at)
Opens the World Map centered on the region simname with pos highlighted. (NOTE: look_at currently does nothing.)
Only works for scripts attached to avatar, or during touch events.
  </string>
  <string name="LSLTipText_llAddToLandBanList">
llAddToLandBanList(key avatar, float hours)
Adds avatar to the land ban list for hours, or indefinitely if hours is 0
  </string>
  <string name="LSLTipText_llRemoveFromLandPassList">
llRemoveFromLandPassList(key avatar)
Removes avatar from the land pass list
  </string>
  <string name="LSLTipText_llRemoveFromLandBanList">
llRemoveFromLandBanList(key avatar)
Removes avatar from the land ban list
  </string>
  <string name="LSLTipText_llSetCameraParams">
llSetCameraParams(list rules)
Sets multiple camera parameters at once.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
  </string>
  <string name="LSLTipText_llClearCameraParams">
llClearCameraParams()
Resets all camera parameters to default values and turns off scripted camera control
  </string>
  <string name="LSLTipText_llListStatistics">
float llListStatistics(integer operation, list src)
Performs statistical aggregate functions on list src using LIST_STAT_* operations
  </string>
  <string name="LSLTipText_llGetUnixTime">
integer llGetUnixTime()
Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock
  </string>
  <string name="LSLTipText_llGetParcelFlags">
integer llGetParcelFlags(vector pos)
Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos
  </string>
  <string name="LSLTipText_llGetRegionFlags">
integer llGetRegionFlags()
Returns the region flags (REGION_FLAG_*) for the region the object is in
  </string>
  <string name="LSLTipText_llXorBase64StringsCorrect">
string llXorBase64StringsCorrect(string s1, string s2)
Correctly performs an exclusive or on two Base64 strings and returns a Base64 string.
s2 repeats if it is shorter than s1.
  </string>
  <string name="LSLTipText_llHTTPRequest">
llHTTPRequest(string url, list parameters, string body)
Sends an HTTP request to the specified url with the body of the request and parameters
  </string>
  <string name="LSLTipText_llResetLandBanList">
llResetLandBanList()
Removes all residents from the land ban list
  </string>
  <string name="LSLTipText_llResetLandPassList">
llResetLandPassList()
Removes all residents from the land access/pass list
  </string>
  <string name="LSLTipText_llGetObjectPrimCount">
integer llGetObjectPrimCount(key object_id)
Returns the total number of prims for an object in the region
  </string>
  <string name="LSLTipText_llGetParcelPrimOwners">
list llGetParcelPrimOwners(vector pos)
Returns a list of all residents who own objects on the parcel at pos and with individual prim counts.
Requires owner-like permissions for the parcel.
  </string>
  <string name="LSLTipText_llGetParcelPrimCount">
integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)
Returns the number of prims on the parcel at pos of the given category.
Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP
  </string>
  <string name="LSLTipText_llGetParcelMaxPrims">
integer llGetParcelMaxPrims(vector pos, integer sim_wide)
Returns the maximum number of prims allowed on the parcel at pos
  </string>
  <string name="LSLTipText_llGetParcelDetails">
list llGetParcelDetails(vector pos, list params)
Returns the parcel details specified in params for the parcel at pos.
Params is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA
  </string>
  <string name="LSLTipText_llSetLinkPrimitiveParams">
llSetLinkPrimitiveParams(integer linknumber, list rules)
Sets primitive parameters for linknumber based on rules
  </string>
  <string name="LSLTipText_llSetLinkTexture">
llSetLinkTexture(integer linknumber, string texture, integer face)
Sets the texture of face for a task that exists in the link chain at linknumber
  </string>
  <string name="LSLTipText_llStringTrim">
string llStringTrim(string src, integer trim_type)
Trims the leading and/or trailing white spaces from a string.
trim_type can be STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.
  </string>
  <string name="LSLTipText_llRegionSay">
llRegionSay(integer channel, string msg)
Broadcasts msg on channel (not 0) that can be heard anywhere in the region by a script listening on channel
  </string>
  <string name="LSLTipText_llGetObjectDetails">
list llGetObjectDetails(key id, list params)
Returns the object details specified in params for the object with key id or OBJECT_UNKNOWN_DETAIL when passed an invalid object parameter type.
Params are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR, _RUNNING_SCRIPT_COUNT, _TOTAL_SCRIPT_COUNT, _SCRIPT_MEMORY, _SCRIPT_TIME, _PRIM_EQUIVALENCE, _SERVER_COST, _STREAMING_COST, _PHYSICS_COST.
  </string>
  <string name="LSLTipText_llSetClickAction">
llSetClickAction(integer action)
Sets the action performed when a prim is clicked upon
  </string>
  <string name="LSLTipText_llGetRegionAgentCount">
integer llGetRegionAgentCount()
Returns the number of avatars in the region
  </string>
  <string name="LSLTipText_llTextBox">
llTextBox(key avatar, string message, integer chat_channel
Shows a dialog box on the avatar&apos;s screen with the message.
It contains a text box for input, and if entered that text is chatted on chat_channel.
  </string>
  <string name="LSLTipText_llGetAgentLanguage">
string llGetAgentLanguage(key avatar)
Returns the language code of the preferred interface language of the avatar
  </string>
  <string name="LSLTipText_llDetectedTouchUV">
vector llDetectedTouchUV(integer index)
Returns the u and v coordinates in the first two components of a vector, for the texture coordinates where the prim was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchFace">
integer llDetectedTouchFace(integer index)
Returns the index of the face where the avatar clicked in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchPos">
vector llDetectedTouchPos(integer index)
Returns the position where the object was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchNormal">
vector llDetectedTouchNormal(integer index)
Returns the surface normal for a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchBinormal">
vector llDetectedTouchBinormal(integer index)
Returns the surface binormal for a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchST">
vector llDetectedTouchST(integer index)
Returns the s and t coordinates in the first two components of a vector, for the surface coordinates where the prim was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llSHA1String">
string llSHA1String(string src)
Returns a string of 40 hex characters that is the SHA1 security Hash of src
  </string>
  <string name="LSLTipText_llGetFreeURLs">
integer llGetFreeURLs()
Returns the number of available URLs for the current script
  </string>
  <string name="LSLTipText_llRequestURL">
key llRequestURL()
Requests one HTTP:// url for use by this object.
An http_request event is triggered with the results.
  </string>
  <string name="LSLTipText_llRequestSecureURL">
key llRequestSecureURL()
Requests one HTTPS:// (SSL) url for use by this object.
An http_request event is triggered with the results.
  </string>
  <string name="LSLTipText_llReleaseURL">
llReleaseURL(string url)
Releases the specified URL, it will no longer be usable
  </string>
  <string name="LSLTipText_llHTTPResponse">
llHTTPResponse(key request_id, integer status, string body)
Responds to request_id with status and body
  </string>
  <string name="LSLTipText_llGetHTTPHeader">
string llGetHTTPHeader(key request_id, string header)
Returns the value for header for request_id
  </string>
  <string name="LSLTipText_llSetPrimMediaParams">
llSetPrimMediaParams(integer face, list params)
Sets the media params for a particular face on an object. If media is not already on this object, add it.
List is a set of name/value pairs in no particular order. Params not specified are unchanged, or if new media is added then set to the default specified.
  </string>
  <string name="LSLTipText_llGetPrimMediaParams">
list llGetPrimMediaParams(integer face, list params)
Returns the media params for a particular face on an object, given the desired list of names, in the order requested.
(Returns an empty list if no media exists on the face.)
  </string>
  <string name="LSLTipText_llClearPrimMedia">
llClearPrimMedia(integer face)
Clears (deletes) the media and all params from the given face.
  </string>
  <string name="LSLTipText_llSetLinkPrimitiveParamsFast">
llSetLinkPrimitiveParamsFast(integer linknumber, list rules)
Identical to llSetLinkPrimitiveParams() but executes without script delay.
  </string>
  <string name="LSLTipText_llGetLinkPrimitiveParams">
list llGetLinkPrimitiveParams(integer link, list params)
Similar to llGetPrimitiveParams() but applies to any prim in the link set and without script delay.
  </string>
  <string name="LSLTipText_llLinkParticleSystem">
llLinkParticleSystem(integer link, list params)
Similar to llParticleSystem() but applies to any prim in the link set.
  </string>
  <string name="LSLTipText_llSetLinkTextureAnim">
llSetLinkTextureAnim(integer link, integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Similar to llSetTextureAnim() but applies to any prim in the link set.
  </string>
  <string name="LSLTipText_llGetLinkNumberOfSides">
integer llGetLinkNumberOfSides(integer link)
Similar to llGetNumberOfSides() but applies to any prim in the link set.
  </string>
  <string name="LSLTipText_llGetUsername" translate="false">
string llGetUsername(key id)
Returns the single-word username of an avatar, if the avatar is in the current region, otherwise the empty string.
  </string>
  <string name="LSLTipText_llRequestUsername" translate="false">
key llRequestUsername(key id)
Requests single-word username of an avatar.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llGetDisplayName" translate="false">
string llGetDisplayName(key id)
Returns the name of an avatar, if the avatar is in the current simulator, otherwise the empty string.
  </string>
  <string name="LSLTipText_llRequestDisplayName" translate="false">
key llRequestDisplayName(key id)
Requests name of an avatar.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llGetEnv" translate="false">
string llGetEnv(string name)
Returns a string with the requested data about the region.
  </string>
  <string name="LSLTipText_llRegionSayTo" translate="false">
llRegionSayTo(key target, integer channel, string message)
Sends message on channel (not DEBUG_CHANNEL) directly to prim or avatar target anywhere within the region.
  </string>
  <string name="LSLTipText_llScriptProfiler" translate="false">
llScriptProfiler(integer flags)
Enables or disables the scripts profiling state.
Flags can be either of PROFILE_SCRIPT_NONE or PROFILE_SCRIPT_MEMORY.
Applies to Mono-compiled scripts only.
  </string>
  <string name="LSLTipText_llGetSPMaxMemory" translate="false">
integer llGetSPMaxMemory()
Returns the integer of the most bytes used while llScriptProfiler() was last active.
Only relevant for Mono-compiled scripts.
  </string>
  <string name="LSLTipText_llGetUsedMemory" translate="false">
integer llGetUsedMemory()
Returns the integer of the number of bytes of memory currently in use by the script.
Only relevant for Mono-compiled scripts.
  </string>
  <string name="LSLTipText_llSetMemoryLimit" translate="false">
integer llSetMemoryLimit(integer limit)
Request limit bytes to be reserved for this script.
Returns a success/failure flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) for whether the memory limit was set.
Only relevant for Mono-compiled scripts.
  </string>
  <string name="LSLTipText_llGetMemoryLimit" translate="false">
integer llGetUsedMemory()
Get the maximum memory a script can use.
Returns the integer amount of memory the script can use in bytes.
  </string>
  <string name="LSLTipText_llSetLinkMedia" translate="false">
integer llSetLinkMedia(integer link, integer face, list params)
Set the media params for a particular face on the 'link'ed prim without a delay.
Returns an integer that is flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) which details the success/failure of the operation(s).
Takes the same parameters as llSetPrimMediaParams()
  </string>
  <string name="LSLTipText_llGetLinkMedia" translate="false">
list llGetLinkMedia(integer link, integer face, list params)
Get the media params for a particular face on a 'link'ed prim(s), given the desired list of named params.
Returns a list of values in the order requested (empty list if no media exists on the face).
Takes the same parameters as llGetPrimMediaParams()
  </string>
  <string name="LSLTipText_llClearLinkMedia" translate="false">
integer llClearLinkMedia(integer link, integer face)
Clears (deletes) the media and all params from the given face on the linked prim(s).
Returns an integer that is flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) which details the success/failure of the operation(s).
  </string>
  <string name="LSLTipText_llSetLinkCamera" translate="false">
llSetLinkCamera(integer link, vector eye, vector at)
Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim.
The two vector parameters are offsets relative to the object's center and expressed in local coordinates.
  </string>
  <string name="LSLTipText_llSetContentType" translate="false">
llSetContentType(key request_id, integer content_type)
Set the Internet media type of an LSL HTTP server response.
content_type may be one of CONTENT_TYPE_TEXT (default) "text/plain", or CONTENT_TYPE_HTML "text/html", only valid for embedded browsers on content owned by the person viewing. Falls back to "text/plain" otherwise.
  </string>
  <string name="LSLTipText_llLinkSitTarget" translate="false">
llLinkSitTarget(integer link, vector offset, rotation rot)
Set the sit location for the 'link'ed prim(s). The sit location is relative to the prim's position and rotation.
Equivalent to calling llSitTarget on link prim(s) in the link set.
  </string>
  <string name="LSLTipText_llAvatarOnLinkSitTarget" translate="false">
key llAvatarOnLinkSitTarget(integer link)
Returns a key that is the UUID of the user seated on the 'link'ed prim.
Equivalent to calling llAvatarOnSitTarget on link prim in the link set.
  </string>
  <string name="LSLTipText_llSetVelocity" translate="false">
llSetVelocity(vector force, integer local)
Applies velocity with 'force' to object and 'local' a boolean (if TRUE, force is treated as a local directional vector instead of region directional vector).
  </string>
  <string name="LSLTipText_llSetAngularVelocity" translate="false">
llSetAngularVelocity(vector force, integer local)
Applies rotational velocity with 'force' to object and 'local' a boolean (if TRUE uses local axis, if FALSE uses region axis).
  </string>
  <string name="LSLTipText_llCastRay" translate="false">
list llCastRay(vector start, vector end, list options)
Cast a ray from start to end and report collision data for intersections with objects.
  </string>
  <string name="LSLTipText_llGetMassMKS" translate="false">
float llGetMassMKS()
Returns a float that is the mass in kilograms of the object the script is attached to.
  </string>
  <string name="LSLTipText_llSetPhysicsMaterial" translate="false">
llSetPhysicsMaterial(integer material_bits, float gravity_multiplier, float restitution, float friction, float density)
Sets the physics properties of the object the script is attached to.
material_bits is a bitwise combination of DENSITY, FRICTION, RESTITUTION and GRAVITY_MULTIPLIER, specifying which floats to actually apply.
  </string>
  <string name="LSLTipText_llGetPhysicsMaterial" translate="false">
list llGetPhysicsMaterial()
Returns a list of the object physics properties: [ float gravity_multiplier, float restitution, float friction, float density ]
  </string>
  <string name="LSLTipText_llManageEstateAccess" translate="false">
integer llManageEstateAccess(integer action, key id)
To add or remove agents from the estate's agent access or ban lists or groups from the estate's group access list.
Only works for objects owned by the Estate Owner or an Estate Manager.
Returns TRUE if successful and FALSE if throttled, on invalid action, on invalid or null id, or if object owner is not allowed to manage the estate.
'action' can be any of: ESTATE_ACCESS_ALLOWED_[AGENT/GROUP]_[ADD/REMOVE] or ESTATE_ACCESS_BANNED_AGENT_[ADD/REMOVE]
  </string>
  <string name="LSLTipText_llSetKeyframedMotion" translate="false">
llSetKeyframedMotion(list keyframes, list options)
Specify a list of times, positions, and orientations to be followed by an object.
The object will be smoothly moved between keyframes by the simulator.
list keyframes: strided keyframe list of the form:
  - vector position (optional via KFM_TRANSLATION and KFM_DATA)
  - rotation orientation (optional via KFM_ROTATION and KFM_DATA)
  - float time
list options: modifiers among:
  - KFM_COMMAND followed by one of KFM_CMD_PLAY, KFM_CMD_STOP, KFM_CMD_PAUSE.
  - KFM_MODE followed by one of KFM_FORWARD, KFM_LOOP, KFM_PING_PONG, KFM_REVERSE.
  - KFM_DATA followed by KFM_ROTATION or KFM_TRANSLATION.
Note that if KFM_COMMAND is provided in the options list, it must be the only option in the list, and cannot be specified in the same function call that sets the keyframes list.
  </string>
  <string name="LSLTipText_llTransferLindenDollars" translate="false">
key llTransferLindenDollars(key id, integer amount)
Attempt to transfer amount of L$ from the owner of the object to 'id'. Requires PERMISSION_DEBIT.
Returns a key used in a matching transaction_result() event for the success or failure of the transfer.
  </string>
  <string name="LSLTipText_llSetRegionPos" translate="false">
integer llSetRegionPos(vector position)
Tries to moves the entire object so that the root prim is within 0.1m of position.
On success the object is moved and TRUE is returned, on failure the object does not change position and FALSE is returned.
  </string>
  <string name="LSLTipText_llGetAgentList" translate="false">
list llGetAgentList(integer scope, list options)
Returns a list of avatar keys for all agents in the region limited to the area(s) specified by scope, or a list containing an error message string.
scope can be AGENT_LIST_PARCEL, AGENT_LIST_PARCEL_OWNER or AGENT_LIST_REGION.
options is currently unused.
  </string>
  <string name="LSLTipText_llAttachToAvatarTemp">
llAttachToAvatarTemp(integer attach_point)
Attaches the object on attach_point to the avatar who has granted permission to the script. The object will not create new inventory for the user, and will disappear on detach or disconnect.
  </string>
  <string name="LSLTipText_llTeleportAgent">
llTeleportAgent(key avatar, string landmark, vector position, vector look_at)
Teleports avatar to a landmark stored in the object's inventory. If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the position given by look_at in local coordinates. To run this function the script must request and obtain the PERMISSION_TELEPORT permission.
  </string>
  <string name="LSLTipText_llTeleportAgentGlobalCoords">
llTeleportAgent(key avatar, vector global_coordinates, vector region_coordinates, vector look_at)
Teleports avatar to region_coordinates within a region at the specified global_coordinates. The agent lands facing the position defined by look_at local coordinates. To run this function the script must request and obtain the PERMISSION_TELEPORT permission.
  </string>

  <!-- OSSL functions
  ** DATA SOURCES **
    OpenSim Functions:    \OpenSim\Region\ScriptEngine\Shared\Api\Interface\IOSSL_Api.cs
    Aurora-Sim Functions:   \Aurora\AuroraDotNetEngine\APIs\AA_API.cs
    Aurora-Sim BOT Functions: \Aurora\BotManager\Bot_API.cs
  -->
  <string name="LSLTipText_osSetDynamicTextureURL" translate="false">
osSetDynamicTextureURL(key dynamicID, string contentType, string url, string extraParams, integer timer )
Renders a web texture on the prim containing the script, and returns the UUID of the newly created texture.
  </string>
  <string name="LSLTipText_osSetDynamicTextureURLBlend" translate="false">
osSetDynamicTextureURLBlend(key dynamicID, string contentType, string url, string extraParams, integer timer, integer alpha)
Allows for two dynamic textures to blend on the prim containing this script.
  </string>
  <string name="LSLTipText_osSetDynamicTextureURLBlendFace" translate="false">
osSetDynamicTextureURLBlendFace(key dynamicID, string contentType, string url, string extraParams, integer blend, integer disp, integer timer, integer alpha, integer face)
Loads a web texture on a prim.
  </string>
  <string name="LSLTipText_osSetDynamicTextureData" translate="false">
osSetDynamicTextureData(key dynamicID, string contentType, string data, string extraParams, integer timer)
Writes text and vector graphics onto a prim face.
  </string>
  <string name="LSLTipText_osSetDynamicTextureDataBlend" translate="false">
osSetDynamicTextureDataBlend(key dynamicID, string contentType, string data, string extraParams, integer timer, integer alpha)
Allows for two dynamic textures to blend on the prim containing this script.
  </string>
  <string name="LSLTipText_osSetDynamicTextureDataBlendFace" translate="false">
osSetDynamicTextureDataBlendFace(key dynamicID, string contentType, string data, string extraParams, integer blend, integer disp, integer timer, integer alpha, integer face)
Allows for two dynamic textures to blend on the specified face of the prim containing this script.
  </string>
  <string name="LSLTipText_osGetTerrainHeight" translate="false">
osGetTerrainHeight(integer x, integer y)
Returns current terrain height as float at the given coordinates.
  </string>
  <string name="LSLTipText_osSetTerrainHeight" translate="false">
osSetTerrainHeight(integer x, integer y, float val)
Sets terrain height at the given coordinates. Use osTerrainFlush() afterwards.
  </string>
  <string name="LSLTipText_osTerrainFlush" translate="false">
osTerrainFlush()
Updates terrain data. Call this after you are done using osTerrainSetHeight.
  </string>
  <string name="LSLTipText_osRegionRestart" translate="false">
osRegionRestart(float seconds)
Restart the current region in the specified number of seconds from now.
  </string>
  <string name="LSLTipText_osRegionNotice" translate="false">
osRegionNotice(string msg)
Broadcasts a notification message to all agents on the current region.
  </string>
  <string name="LSLTipText_osConsoleCommand" translate="false">
osConsoleCommand(string command)
Issues commands directly to the OpenSim server console.
  </string>
  <string name="LSLTipText_osSetParcelMediaURL" translate="false">
osSetParcelMediaURL(string url)
Sets parcel media URL.
  </string>
  <string name="LSLTipText_osSetPrimFloatOnWater" translate="false">
osSetPrimFloatOnWater(integer floatYN)
Make physical prims float at the water level, TRUE or FALSE.
  </string>
  <string name="LSLTipText_osSetParcelSIPaddress" translate="false">
osSetParcelSIPAddress(string SIPAddress)
Sets parcel SIP Address for Voice.
  </string>
  <string name="LSLTipText_osGetAgentIP" translate="false">
osGetAgentIP(key agent)
Returns the Avatars IP Address as a string. Allows in-world tools be used to coordinate out of world network services that need access to client IP addresses.
Should *ONLY* be used by Region Server Owner.
  </string>
  <string name="LSLTipText_osGetAgents" translate="false">
osGetAgents()
Returns a list of all avatars in the region in which the script is running.
  </string>
  <string name="LSLTipText_osTeleportAgent" translate="false">
POLYMORPHIC COMMAND
  osTeleportAgent(key agent, integer regionX, integer regionY, vector position, vector lookat)
  osTeleportAgent(key agent, string regionName, vector position, vector lookat)
  osTeleportAgent(key agent, vector position, vector lookat)
  
  Teleports the specified agent to a specified location in the region, the grid, or the hypergrid.
  </string>
  <string name="LSLTipText_osTeleportOwner" translate="false">
POLYMORPHIC COMMAND
  osTeleportOwner(integer regionX, integer regionY, vector position, vector lookat)
  osTeleportOwner(string regionName, vector position, vector lookat)
  osTeleportOwner(vector position, vector lookat)
  
  Teleports the owner of the object that holds the script to a specified location in the region, the grid, or the hypergrid.
  </string>
  <string name="LSLTipText_osAvatarPlayAnimation" translate="false">
osAvatarPlayAnimation(key UUID, string animation)
Triggers animations contained within the same prim as the script. Does not need the target avatar's permission.
  </string>
  <string name="LSLTipText_osAvatarStopAnimation" translate="false">
osAvatarStopAnimation(key UUID, string animation)
Stops specified animation on the specified avatar.
  </string>
  <string name="LSLTipText_osMovePen" translate="false">
osMovePen(string drawList, integer x, integer y)
Moves the pen's location to the coordinates specified by the x and y parameters, without drawing anything.
  </string>
  <string name="LSLTipText_osDrawLine" translate="false">
POLYMORPHIC COMMAND
  osDrawLine(string drawList, integer startX, integer startY, integer endX, integer endY)
  osDrawLine(string drawList, integer endX, integer endY)
  Draws a line on a dynamic texture.
  </string>
  <string name="LSLTipText_osDrawText" translate="false">
osDrawText(string drawList, string text)
Renders text on a dynamic texture.
  </string>
  <string name="LSLTipText_osDrawEllipse" translate="false">
osDrawEllipse(string drawList, integer width, integer height)
Draws an ellipse on a dynamic texture.
  </string>
  <string name="LSLTipText_osDrawRectangle" translate="false">
osDrawRectangle(string drawList, integer width, integer height)
Draws a rectangle on a dynamic texture.
  </string>
  <string name="LSLTipText_osDrawFilledRectangle" translate="false">
osDrawFilledRectangle(string drawList, integer width, integer height)
Draws a rectangle on a dynamic texture, and fills it with the current pen color.
  </string>
  <string name="LSLTipText_osDrawPolygon" translate="false">
osDrawPolygon (string drawList, list x, list y)
Draws a polygon on a dynamic texture.
  </string>
  <string name="LSLTipText_osDrawFilledPolygon" translate="false">
osDrawFilledPolygon (string drawList, list x, list y)
Draws a polygon on a dynamic texture, and fills it with the current pen color.
  </string>
  <string name="LSLTipText_osSetFontName" translate="false">
osSetFontName(string drawList, string fontName)
Sets current font to be used by osDrawText. Font must exist on region server to display.
  </string>
  <string name="LSLTipText_osSetFontSize" translate="false">
osSetFontSize(string drawList, integer fontSize)
Sets the font size to be used in osDrawText.
  </string>
  <string name="LSLTipText_osSetPenSize" translate="false">
osSetPenSize(string drawList, integer penSize)
Sets the pen size (line thickness) that is to be used when drawing dynamic textures.
  </string>
  <string name="LSLTipText_osSetPenColor" translate="false">
osSetPenColor(string drawList, string color)
Sets the pen color that is to be used when drawing dynamic textures.
  </string>
  <string name="LSLTipText_osSetPenCap" translate="false">
osSetPenCap(string drawList, string direction, string type)
Apply a shape on the end of a line. This allows using arrow, diamond, round and flat caps.
  </string>
  <string name="LSLTipText_osDrawImage" translate="false">
osDrawImage(string drawList, integer width, integer height, string imageUrl)
Retrieves an image specified by the imageUrl parameter and draws it at the specified height and width.
  </string>
  <string name="LSLTipText_osGetDrawStringSize" translate="false">
vector osGetDrawStringSize(string contentType, string text, string fontName, integer fontSize)
Returns a vector containing the horizontal and vertical dimensions in pixels of the specified text.
  </string>
  <string name="LSLTipText_osSetStateEvents" translate="false">
osSetStateEvents(integer events)
Used in the past as a workaround for a bug with Opensim, which has long since been fixed.
  </string>
  <string name="LSLTipText_osList2Double" translate="false">
double osList2Double(list src, integer index)
Returns double-precision value from src at index.
  </string>
  <string name="LSLTipText_osSetRegionWaterHeight" translate="false">
osSetRegionWaterHeight(float height)
Adjusts water height on region.
  </string>
  <string name="LSLTipText_osSetRegionSunSettings" translate="false">
osSetRegionSunSettings(integer useEstateSun, integer sunFixed, float sunHour)
Changes the estate sun settings, then triggers a sun update
'sunFixed' TRUE to keep the sun stationary, FALSE to use global time
'sunHour' The sun hour that is desired, 0...24, 0 is sunrise.
  </string>
  <string name="LSLTipText_osSetEstateSunSettings" translate="false">
osSetEstateSunSettings(integer sunFixed, float sunHour)
sunFixed = TRUE or FALSE, sunHour = 00.00 to 24.00.
  </string>
  <string name="LSLTipText_osGetCurrentSunHour" translate="false">
float osGetCurrentSunHour()
Returns float value of current sun hour 0...24 0 is sunrise.
  </string>
  <string name="LSLTipText_osGetSunParam" translate="false">
float osGetSunParam(string param)
Returns current float values for param, where param = day_length, year_length, day_night_offset, update_interval.
  </string>
  <string name="LSLTipText_osSetSunParam" translate="false">
osSetSunParam(string param, float value)
Sets region's sun parameters, where param = day_length, year_length, day_night_offset, update_interval.
  </string>
  <string name="LSLTipText_osWindActiveModelPluginName" translate="false">
string osWindActiveModelPluginName()
Returns the current working wind module installed
These are SimpleRandomWind or ConfigurableWind.
  </string>
  <string name="LSLTipText_osSetWindParam" translate="false">
osSetWindParam(string plugin, string param, float value)
Sets value of param for plugin. SimpleRandomWind plugin param = strength.
ConfigurableWind plugin params = avgStrength, avgDirection, varStrength, varDirection, rateChange.
  </string>
  <string name="LSLTipText_osGetWindParam" translate="false">
float osGetWindParam(string plugin, string param)
Returns float value of param for plugin. SimpleRandomWind plugin param = strength.
ConfigurableWind plugin params = avgStrength, avgDirection, varStrength, varDirection, rateChange.
  </string>
  <string name="LSLTipText_osParcelJoin" translate="false">
osParcelJoin(vector start, vector end)
Where start = top corner, end = bottom corner.
Subdivides from start vector to end vector. Z is ignored but must exist in syntax
  </string>
  <string name="LSLTipText_osParcelSubdivide" translate="false">
osParcelSubdivide(vector start, vector end)
Where start = top corner, end = bottom corner.
Subdivides from start vector to end vector. Z is ignored but must exist in syntax
  </string>
  <string name="LSLTipText_osSetParcelDetails" translate="false">
osSetParcelDetails(vector pos, list rules)
Set parcel details at position x,y,x.
Rules = PARCEL_DETAILS_NAME, PARCEL_DETAILS_DESC, PARCEL_DETAILS_OWNER, PARCEL_DETAILS_GROUP
  </string>
  <string name="LSLTipText_osGetScriptEngineName" translate="false">
string osGetScriptEngineName()
Returns the name of the script engine which is currently enabled on the server.
  </string>
  <string name="LSLTipText_osGetSimulatorVersion" translate="false">
string osGetSimulatorVersion()
Returns current server version information as a string.
  </string>
  <string name="LSLTipText_osParseJSON" translate="false">
string osParseJSON(string JSON)
Returns a deserialized JSON.
  </string>
  <string name="LSLTipText_osParseJSONNew" translate="false">
string osParseJSON(string JSON)
Returns a deserialized JSON object.
  </string>  
  <string name="LSLTipText_osMessageObject" translate="false">
osMessageObject(key UUID, string message)
Sends string to object identified by UUID.
Receiving object requires a dataserver(key queryid, string data) in a contained script(s).
The queryid passed will be the id of the calling object.
  </string>
  <string name="LSLTipText_osMakeNotecard" translate="false">
osMakeNotecard(string notecardName, list contents)
Write a Notecard contained in Prim with contents of list.
  </string>
  <string name="LSLTipText_osGetNotecardLine" translate="false">
string osGetNotecardLine(string name, integer line)
Reads the requested notecard line and return its data as a string.
  </string>
  <string name="LSLTipText_osGetNotecard" translate="false">
string osGetNotecard(string name)
Reads the entire notecard and return its data as a string.
  </string>
  <string name="LSLTipText_osGetNumberOfNotecardLines" translate="false">
integer osGetNumberOfNotecardLines(string name)
Returns total number of lines in a notecard.
  </string>
  <string name="LSLTipText_osAvatarName2Key" translate="false">
key osAvatarName2Key(string firstname, string lastname)
Returns the avatar's UUID from their firstname, lastname.
  </string>
  <string name="LSLTipText_osKey2Name" translate="false">
string osKey2Name(key UUID)
Returns avatar name from their UUID key.
  </string>
  <string name="LSLTipText_osGetGridNick" translate="false">
string osGetGridNick()
Returns the grid's nickname.
  </string>
  <string name="LSLTipText_osGetGridName" translate="false">
string osGetGridName()
Returns the grid's name.
  </string>
  <string name="LSLTipText_osGetGridLoginURI" translate="false">
string osGetGridLoginURI()
Returns the grid's LoginURI.
  </string>
  <string name="LSLTipText_osGetGridHomeURI" translate="false"> <!-- Mar.5.2012-->
string osGetGridHomeURI()
Returns the current grid URI.
  </string>
  <string name="LSLTipText_osGetGridCustom" translate="false"> 
string osGetGridCustom(string key)
Returns the grid's Grid Info.
  </string>
  <string name="LSLTipText_osFormatString" translate="false">
string osFormatString(string to_format, list strings)
Returns string. OsFormatString("My name is {0}, I'm located in {1}\u201d, [llGetObjectName(), llGetRegionName()])
Where {num} parameters must be incremented for each list item, starting at zero, surrounded by curly brackets.
  </string>
  <string name="LSLTipText_osMatchString" translate="false">
list osMatchString(string src, string pattern, integer start)
Returns list of matches for the pattern and its components inside the source string. The pattern is a regular expression.
Each match in the result is the string that matched and its position in the source.
  </string>
  <string name="LSLTipText_osReplaceString" translate="false"> <!-- mar.5.2012 -->
string osReplaceString(string src, string pattern, string replace, integer count, integer start)
Returns new string with replacements completed.
  </string>
  <string name="LSLTipText_osLoadedCreationDate" translate="false">
string osLoadedCreationDate()
Returns Creation Date from meta data of OAR.
  </string>
  <string name="LSLTipText_osLoadedCreationTime" translate="false">
string osLoadedCreationTime()
Returns Creation Time from meta data of OAR.
  </string>
  <string name="LSLTipText_osLoadedCreationID" translate="false">
string osLoadedCreationID()
Returns creation ID from meta data of OAR. Can not be used to identify a machine.
  </string>
  <string name="LSLTipText_osGetLinkPrimitiveParams" translate="false">
list osGetLinkPrimitiveParams(integer linknumber, list rules)
Returns prim params for the linkset prims specified by linknum.
If using linkset constants (e.g. LINK_SET, LINK_ALL_CHILDREN, etc), the requested params of each relevant prim are concatenated to the end of the list.
Otherwise, usage is identical to llGetPrimitiveParams().
  </string>
  <string name="LSLTipText_osIsNpc" translate="false">
key osIsNpc(key NPC)
Returns TRUE if 'key' is an NPC (non-player-character).
  </string>
  <string name="LSLTipText_osNpcCreate" translate="false">
POLYMORPHIC
  osNpcCreate(string firstname, string lastname, vector position, string notecard)
  osNpcCreate(string firstname, string lastname, vector position, string notecard, integer options)
  Creates an NPC (Non Player Character) clone named firstname lastname at position from a notecard containing the specifications.
  </string>
  <string name="LSLTipText_osNpcSaveAppearance" translate="false">
osNpcSaveAppearance(key npc, string notecard)
Save NPC's current body part, clothing and attachments data to notecard in prim inventory.
The avatar must be present in the region when this function is invoked.
The baked textures for the avatar (necessary to recreate appearance) are saved permanently.)
  </string>
  <string name="LSLTipText_osNpcLoadAppearance" translate="false">
osNpcLoadAppearance(key npc, string notecard)
Load NPC appearance from notecard.
This notecard must contain appearance data created with the save appearance function.
  </string>
  <string name="LSLTipText_osNpcGetPos" translate="false">
vector osNpcGetPos(key npc)
Returns current position vector of the NPC.
  </string>
  <string name="LSLTipText_osNpcMoveTo" translate="false">
osNpcMoveTo(key npc, vector position)
Moves an NPC to a location within the region.
  </string>
  <string name="LSLTipText_osNpcMoveToTarget" translate="false">
osNpcMoveToTarget(key npc, vector target, integer options)
Moves NPC to given target over time. Options = OS_NPC_FLY, OS_NPC_NO_FLY, OS_NPC_LAND_AT_TARGET
  </string>
  <string name="LSLTipText_osNpcGetOwner" translate="false">
rotation osNpcGetOwner(key npc)
Returns the NPC owner UUID.
  </string>
  <string name="LSLTipText_osNpcGetRot" translate="false">
rotation osNpcGetRot(key npc)
Gets the rotation of the avatar. Only the rotation around the Z plane in Euler rotation (horizontal rotation) has any meaning.
  </string>
  <string name="LSLTipText_osNpcSetRot" translate="false">
osNpcSetRot(key npc, rotation rot)
Set the rotation of the NPC. Only setting the rotation in the Z plane in Euler rotation will have any meaningful effect (turning NPC facing direction).
Setting X or Y Euler values will result in the avatar rotating in an undefined manner.
  </string>
  <string name="LSLTipText_osNpcStopMoveToTarget" translate="false">
osNpcStopMoveToTarget(key npc)
Stop a current move to a target.
  </string>
  <string name="LSLTipText_osNpcSay" translate="false">
osNpcSay(key npc, string message)
Makes an NPC say something.
  </string>
  <string name="LSLTipText_osNpcSit" translate="false">
osNpcSit(key npc, key primkey, integer options)
Makes NPC sit on prim/item.
  </string>
  <string name="LSLTipText_osNpcStand" translate="false">
osNpcStand(key npc)
Makes NPC identified by UUID to stand.
  </string>
  <string name="LSLTipText_osNpcRemove" translate="false">
osNpcRemove(key npc)
Removes an NPC.
  </string>
  <string name="LSLTipText_osNpcPlayAnimation" translate="false">
osNpcPlayAnimation(key npc, string animation)
Makes NPC identified by key npc to play animation.
  </string>
  <string name="LSLTipText_osNpcStopAnimation" translate="false">
osNpcStopAnimation(key npc, string animation)
Makes NPC identified by key npc stop playing animation.
  </string>
  <string name="LSLTipText_osOwnerSaveAppearance" translate="false">
osOwnerSaveAppearance(string notecard)
Save Owner's current body part, clothing and attachments data to notecard in prim inventory.
The avatar must be present in the region when this function is invoked.
The baked textures for the avatar (necessary to recreate appearance) are saved permanently.)
  </string>
  <string name="LSLTipText_osAgentSaveAppearance" translate="false">
osAgentSaveAppearance(key agentId, string notecard)
Save an Avatar's current body part, clothing and attachments data to specified notecard in prim inventory.
The avatar must be present in the region when this function is invoked.
The baked textures for the avatar (necessary to recreate appearance) are saved permanently.)
  </string>
  <string name="LSLTipText_osGetMapTexture" translate="false">
key osGetMapTexture()
Returns the map texture UUID of current region.
  </string>
  <string name="LSLTipText_osGetRegionMapTexture" translate="false">
key osGetRegionMapTexture(string regionName)
Returns the map texture UUID for the regionName requested.
  </string>
  <string name="LSLTipText_osGetRegionStats" translate="false">
list osGetRegionStats()
Returns a list of float values representing a number of region statistics (21 of the values shown in the statistics bar of LL-based clients).
  </string>
  <string name="LSLTipText_osGetSimulatorMemory" translate="false">
integer osGetSimulatorMemory()
Returns integer of current memory used by simulator instance.
  </string>
  <string name="LSLTipText_osKickAvatar" translate="false">
osKickAvatar(string FirstName, string LastName, string alert)
Kicks avatar from region with an alert message.
  </string>
  <string name="LSLTipText_osSetSpeed" translate="false">
osSetSpeed(key UUID, float SpeedModifier)
Multiplies the normal running, walking, and flying speed of the specified avatar.
  </string>
  <string name="LSLTipText_osCauseHealing" translate="false">
osCauseHealing(key UUID, float healing)
Causes healing to specified avatar.
  </string>
  <string name="LSLTipText_osCauseDamage" translate="false">
osCauseDamage(key UUID, float damage)
Causes damage to specified avatar. Region must be damage enabled.
  </string>
  <string name="LSLTipText_osGetPrimitiveParams" translate="false">
list osGetPrimitiveParams(key prim, list rules)
Gets the parameters of the primitive, specified by key.
  </string>
  <string name="LSLTipText_osSetPrimitiveParams" translate="false">
osSetPrimitiveParams(key prim, list rules)
Sets primitive Params.
  </string>
  <string name="LSLTipText_osSetProjectionParams" translate="false">
POLYMORPHIC COMMAND
osSetProjectionParams(key prim. integer projection, key texture, float fov, float focus, float ambience)
osSetProjectionParams(integer projection, key texture, float fov, float focus, float ambience)
osSetProjectionParams(key prim, integer projection, key texture, float fov, float focus, float ambience)
  </string>
  <string name="LSLTipText_osGetAvatarList" translate="false">
list osGetAvatarList()
Returns strided list of the UUID, position, and name of each avatar in the region, except the owner.
  </string>
  <string name="LSLTipText_osUnixTimeToTimestamp" translate="false">
string osUnixTimeToTimestamp(integer unixtime)
Converts unixtime to an llGetTimeStamp() formated string.
  </string>
  <string name="LSLTipText_cmSetWindlightScene" translate="false">
cmSetWindlightScene(list rules)
Set the current WindLight scene. Estate managers and owners only.
(Reguires LightShare Enabled Viewer)
  </string>
  <string name="LSLTipText_cmSetWindlightSceneTargeted" translate="false">
cmSetWindlightSceneTargeted(list rules, key target)
Set the current WindLight scene directed at a specific avatar. Estate managers and owners only.
(Reguires LightShare Enabled Viewer)
  </string>
  <string name="LSLTipText_cmGetWindlightScene" translate="false">
list cmGetWindlightScene(list rules)
Get the current LightShare settings.
(Reguires LightShare Enabled Viewer)
  </string>
  <string name="LSLTipText_lsSetWindlightScene" translate="false">
lsSetWindlightScene(list rules)
Set the current WindLight scene. Estate managers and owners only.
(Reguires LightShare Enabled Viewer)
  </string>
  <string name="LSLTipText_lsSetWindlightSceneTargeted" translate="false">
lsSetWindlightSceneTargeted(list rules, key target)
Set the current WindLight scene directed at a specific avatar. Estate managers and owners only.
(Reguires LightShare Enabled Viewer)
  </string>
  <string name="LSLTipText_lsGetWindlightScene" translate="false">
list lsGetWindlightScene(list rules)
Get the current WindLight settings.
(Reguires LightShare Enabled Viewer)
  </string>
  <!-- Aurora-Sim OSSL-Functions (unique to Aurora Only) 'osReturnObject', 'osReturnObjects', 'osShutDown', 'osaddAgentToGroup', 'osRezObject',
  // Aurora-Sim aaFunctions (\Aurora\AuroraDotNetEngine\APIs\IAA_Api.cs)
  // Aurora-Sim botFunctions (\Aurora\BotManager\IBot_Api.cs) -->
  <string name="LSLTipText_osReturnObject">
osReturnObject(key userID)
Returns object to specified avatars UUID.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_osReturnObjects">
osReturnObjects(float Parameter)
Returns group of objects. Parameter's are numeric, values are owner objects = 0, everyone except owner objects = 1, group objects = 2.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_osShutDown">
osShutDown()
Shut's down current Simulator. Authorized Admin Only by config.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_osAddAgentToGroup">
osAddAgentToGroup(key avatarID, string group_name, string role_name)
Adds an avatar to a group. Where group_name = name of the target group, role_name = role to assign within the group.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_osRezObject">
osRezObject(string inventory, vector position, vector velocity, rotation rot, integer param, integer isRezAtRoot, integer doRecoil, integer SetDieAtEdge, integer CheckPos)
Where inventory = object to rez. Position = vector to rez object. Velocity = initial velocity. Rot = initial rotation. Param = onrez event.
IzAtRoot = TRUE/FALSE flag changes llRezAtRoot to llRezObject. doRecoil =TRUE/FALSE to push avatar. SetDieAtEdge = TRUE/FALSE for rezzed object to die at edge of region.
CheckPos = TRUE/FALSE enable/disable 10m rez limit.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSetCloudDensity" translate="false">
aaSetCloudDensity(float density)
AaSetCloudDensity(0.5) Where float density values are 0.0 = no cloud to 1.0 = 100% cloud.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaUpdateDatabase" translate="false">
aUpdateDatabase(string Key, string value, string token)
Where Key = database field name, xmlDataToPutIntoTheDatabase = serialized XML data, Token = data-password
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaQueryDatabase" translate="false">
aaQueryDatabase(string Key, string Token)
Returns a list with first value is the token, the second the Key, and the third the value
Where Key = database field name, Token = data-password
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaDeserializeXMLValues" translate="false">
aaDeserializeXMLValues(string xmlData)
Returns a list of Values from XML data. Where xmlData = xml formatted data Values.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaDeserializeXMLKeys" translate="false">
aaDeserializeXMLKeys(string xmlData)
Returns a list of keys from XML data. Where xmlData = xml formatted data keys.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSetConeOfSilence" translate="false">
aaSetConeOfSilence(float radius)
Where radius = metres radius from centre of scripted item. This creates an area that sounds can only be heard by the people within the area(radius) and not heard outside and visa-versa.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSerializeXML" translate="false">
aaSerializeXML(list keys, list values)
Returns xml formatted string of the keys and values. Where keys = list of keys in the database, values = fields to retrieve from database.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetTeam" translate="false">
aaGetTeam(key uuid)
Returns a string of avatars team name. Where uuid = avatar key.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetHealth" translate="false">
aaGetHealth(key uuid)
Returns float value (0.0 to 100.0) of current health. Where uuid = avatar key.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaJoinCombat" translate="false">
aaJoinCombat(key uuid)
Where uuid = avatar key. If (PERMISSION_COMBAT == PERMISSION_COMBAT) and permission is granted then join combat.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaLeaveCombat" translate="false">
aaLeaveCombat(key uuid)
Where uuid = avatar key.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaJoinCombatTeam" translate="false">
aaJoinCombatTeam(key uuid, string team)
Where uuid = key of avatar, team = string of the team name.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaRequestCombatPermission" translate="false">
aaRequestCombatPermission(key ID)
Where ID = avatar uuid. Requests target avatar for Permissions to enter into combat mode.
Raises a run_time_permissions event. (PERMISSION_COMBAT == PERMISSION_COMBAT).
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaThawAvatar" translate="false">
aaThawAvatar(key ID)
Where ID = avatar uuid. If combat permission are granted then avatar can be un-frozen (movement re-enabled).
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaFreezeAvatar" translate="false">
aaFreezeAvatar(key ID)
Where ID = avatar uuid. If combat permission are granted then avatar can be frozen (no movement).
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetTeamMembers" translate="false">
aaGetTeamMembers(string team)
Return a list of team members. Where team = string of team name.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetLastOwner" translate="false">
POLYMORPHIC FUNCTION.
aaGetLastOwner(string PrimID) returns last owner UUID of PrimID where PrimID = uuid of prim.
AaGetLastOwner() returns last owner uuid of prim containg script.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSayDistance" translate="false">
aaSayDistance(integer channelID, float Distance, string text)
Where channelID = channel to say on, Distance = float in meters for distance to say, text = string to say.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSayTo" translate="false">
aaSayTo(key userID, string text)
Where userID = avatar key, text = string msg. Similar to llOwnerSay but can be directly targeted to an avatar.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetWalkDisabled " translate="false">
aaGetWalkDisabled(key ID)
Returns integer of TRUE or FALSE for specifid ID. Where ID = avatar uuid.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSetWalkDisabled" translate="false">
aaSetWalkDisabled(key ID, integer Value)
Where ID = avatar uuid, Value = TRUE or FALSE. If PERMISSION_COMBAT is accepted, this disables walk, forcing avatar to fly.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetFlyDisabled " translate="false">
aaGetFlyDisabled(key ID)
Returns integer of TRUE or FALSE for specifid ID. Where ID = avatar uuid.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSetFlyDisabled" translate="false">
aaSetFlyDisabled(key ID, integer Value)
Where ID = avatar uuid, Value = TRUE or FALSE. If PERMISSION_COMBAT is accepted, this disables flying, forcing avatar to walk.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaAvatarFullName2Key " translate="false">
aaAvatarFullName2Key(string FullName)
Returns the avatar uuid from their fullname. Where FullName = "Firstname Lastname\u201d.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaRaiseError" translate="false">
aaRaiseError(string message)
Allows you to have errors that end the execution of the event and fire another event in the script.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetText " translate="false">
aaGetText()
Returns a string of the hover text of an object.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetTextColor " translate="false">
aaGetTextColor()
Returns the hovertext color in rotation. Use Ex: rotation color = aaGetTextColor() to separate color.x, color.y, color.z, color.s Where s = value of alpha in llSetText.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaSetEnv " translate="false">
aaSetEnv(string EnvName, list Value)
Sets environment values. Where EnvName = ENABLE_GRAVITY, GRAVITY_FORCE_X, GRAVITY_FORCE_Y, GRAVITY_FORCE_Z, ADD_GRAVITY_POINT, ADD_GRAVITY_FORCE, START_TIME_REVERSAL_SAVING,
STOP_TIME_REVERSAL_SAVING, START_TIME_REVERSAL, STOP_TIME_REVERSAL.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_aaGetIsInfiniteRegion" translate="false">
aaGetIsInfiniteRegion()
Returns TRUE or FALSE if region is an infinite region.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botGetWaitingTime" translate="false">
botGetWaitingTime(integer waitTime)
Returns waitTime as vector.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botSetMap" translate="false">
botSetMap(key keyOfBot, list positions, list movementType, integer flags)
keyOfBot = bot uuid, positions = list of position vectors, movementType = corresponding list of move modes: 0 \u2013 walk, 1 \u2013 fly,
flags = BOT_FOLLOW_FLAG_NONE and BOT_FOLLOW_FLAG_INDEFINITELY.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botCreateBot" translate="false">
botCreateBot(string FirstName, string LastName, key idToClone, vector startPos)
Where FirstName and LastName = strings for new bot name. idToClone = uuid of prebuild avatar to clone OR another existing avatar. startPos = vector of starting position on region.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botRemoveBot" translate="false">
botRemoveBot(key botID)
Where botID = uuid of bot. Removes bot identified by botID.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botPauseMovement" translate="false">
botPauseMovement(key botID)
Where botID = bot uuid. Pauses bot at current position.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botResumeMovement" translate="false">
botResumeMovement(key botID)
Where botID = bot uuid. Resumes bot movement.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botFollowAvatar" translate="false">
botFollowAvatar(key botID, string avName, float startFollowDistance, float endFollowDistance)
Where botID = bot uuid. AvName = sting of avatar name OR avatar uuid. StartFollowDistance = distance to start following from. EndFollowDistance = distance to stop following avatar.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botStopFollowAvatar" translate="false">
botStopFollowAvatar(key botID)
Where botID = bot uuid. Stops bot from following an avatar.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botSendChatMessage" translate="false">
botSendChatMessage(key botID, string message, integer channel, integer sayType)
Where botID = bot uuid. Message = string msg. Channel = channel to speak on. SayType = (0=whisper, 1=say, 2=shout).
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botSendIM" translate="false">
botSendIM(string bot, string user, string message)
Send IM to bot. 
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botSetShouldFly" translate="false">
botSetShouldFly(key botID, integer ShouldFly)
Where botID = bot uuid. ShouldFly = TRUE/FALSE. Enables or disables flight mode.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botSitObject" translate="false">
botSitObject(key botID, key objectID, vector offset)
Where botID = bot uuid, objectID = uuid of object to sit on, offset = Vector for sit position (note that VECTOR_ZERO = default sit pos).
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botStandUp" translate="false">
botStandUp(key botID)
Where botID = bot uuid. Command bot to stand up.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botTouchObject" translate="false">
botTouchObject(key botID, key objectID)
Where botID = bot uuid, objectID = object uuid. Causes bot to touch object identified.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botAddTag" translate="false">
botAddTag(key botID, string tag)
Where botID = bot uuid, tag = string tag over bot.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botGetBotsWithTag" translate="false">
botGetBotsWithTag(string tag)
Where tag = tag string to match. Return a list of bot UUID's in region with the matching tag.
(Aurora-Sim only)
  </string>
  <string name="LSLTipText_botRemoveBotsWithTag" translate="false">
botRemoveBotsWithTag(string tag)
Where tag = tag string to match. Removes bot's matching the tag.
(Aurora-Sim only)
  </string>
  <!-- *** END OF OpenSimulator & Aurora-Sim syntax section *** -->
</strings>
